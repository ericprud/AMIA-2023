{"version":3,"file":"SparqlGenerator.js","sources":["../../../../../../../fhircat/fhir-sparql/fhir-sparql-js/node_modules/sparqljs/lib/SparqlGenerator.js"],"sourcesContent":["var XSD_INTEGER = 'http://www.w3.org/2001/XMLSchema#integer';\nvar XSD_STRING = 'http://www.w3.org/2001/XMLSchema#string';\n\nfunction Generator(options) {\n  this._options = options = options || {};\n\n  var prefixes = options.prefixes || {};\n  this._prefixByIri = {};\n  var prefixIris = [];\n  for (var prefix in prefixes) {\n    var iri = prefixes[prefix];\n    if (isString(iri)) {\n      this._prefixByIri[iri] = prefix;\n      prefixIris.push(iri);\n    }\n  }\n  var iriList = prefixIris.join('|').replace(/[\\]\\/\\(\\)\\*\\+\\?\\.\\\\\\$]/g, '\\\\$&');\n  this._prefixRegex = new RegExp('^(' + iriList + ')([a-zA-Z][\\\\-_a-zA-Z0-9]*)$');\n  this._usedPrefixes = {};\n  this._sparqlStar = options.sparqlStar;\n  this._indent =  isString(options.indent)  ? options.indent  : '  ';\n  this._newline = isString(options.newline) ? options.newline : '\\n';\n  this._explicitDatatype = Boolean(options.explicitDatatype);\n}\n\n// Converts the parsed query object into a SPARQL query\nGenerator.prototype.toQuery = function (q) {\n  var query = '';\n\n  if (q.queryType)\n    query += q.queryType.toUpperCase() + ' ';\n  if (q.reduced)\n    query += 'REDUCED ';\n  if (q.distinct)\n    query += 'DISTINCT ';\n\n  if (q.variables){\n    query += mapJoin(q.variables, undefined, function (variable) {\n      return isTerm(variable) ? this.toEntity(variable) :\n             '(' + this.toExpression(variable.expression) + ' AS ' + variableToString(variable.variable) + ')';\n    }, this) + ' ';\n  }\n  else if (q.template)\n    query += this.group(q.template, true) + this._newline;\n\n  if (q.from)\n    query += this.graphs('FROM ', q.from.default) + this.graphs('FROM NAMED ', q.from.named);\n  if (q.where)\n    query += 'WHERE ' + this.group(q.where, true) + this._newline;\n\n  if (q.updates)\n    query += mapJoin(q.updates, ';' + this._newline, this.toUpdate, this);\n\n  if (q.group)\n    query += 'GROUP BY ' + mapJoin(q.group, undefined, function (it) {\n      var result = isTerm(it.expression)\n        ? this.toEntity(it.expression)\n        : '(' + this.toExpression(it.expression) + ')';\n      return it.variable ? '(' + result + ' AS ' + variableToString(it.variable) + ')' : result;\n    }, this) + this._newline;\n  if (q.having)\n    query += 'HAVING (' + mapJoin(q.having, undefined, this.toExpression, this) + ')' + this._newline;\n  if (q.order)\n    query += 'ORDER BY ' + mapJoin(q.order, undefined, function (it) {\n      var expr = '(' + this.toExpression(it.expression) + ')';\n      return !it.descending ? expr : 'DESC ' + expr;\n    }, this) + this._newline;\n\n  if (q.offset)\n    query += 'OFFSET ' + q.offset + this._newline;\n  if (q.limit)\n    query += 'LIMIT ' + q.limit + this._newline;\n\n  if (q.values)\n    query += this.values(q);\n\n  // stringify prefixes at the end to mark used ones\n  query = this.baseAndPrefixes(q) + query;\n  return query.trim();\n};\n\nGenerator.prototype.baseAndPrefixes = function (q) {\n  var base = q.base ? ('BASE <' + q.base + '>' + this._newline) : '';\n  var prefixes = '';\n  for (var key in q.prefixes) {\n    if (this._options.allPrefixes || this._usedPrefixes[key])\n      prefixes += 'PREFIX ' + key + ': <' + q.prefixes[key] + '>' + this._newline;\n  }\n  return base + prefixes;\n};\n\n// Converts the parsed SPARQL pattern into a SPARQL pattern\nGenerator.prototype.toPattern = function (pattern) {\n  var type = pattern.type || (pattern instanceof Array) && 'array' ||\n             (pattern.subject && pattern.predicate && pattern.object ? 'triple' : '');\n  if (!(type in this))\n    throw new Error('Unknown entry type: ' + type);\n  return this[type](pattern);\n};\n\nGenerator.prototype.triple = function (t) {\n  return this.toEntity(t.subject) + ' ' + this.toEntity(t.predicate) + ' ' + this.toEntity(t.object) + '.';\n};\n\nGenerator.prototype.array = function (items) {\n  return mapJoin(items, this._newline, this.toPattern, this);\n};\n\nGenerator.prototype.bgp = function (bgp) {\n  return this.encodeTriples(bgp.triples);\n};\n\nGenerator.prototype.encodeTriples = function (triples) {\n  if (!triples.length)\n    return '';\n\n  var parts = [], subject = undefined, predicate = undefined;\n  for (var i = 0; i < triples.length; i++) {\n    var triple = triples[i];\n    // Triple with different subject\n    if (!equalTerms(triple.subject, subject)) {\n      // Terminate previous triple\n      if (subject)\n        parts.push('.' + this._newline);\n      subject = triple.subject;\n      predicate = triple.predicate;\n      parts.push(this.toEntity(subject), ' ', this.toEntity(predicate));\n    }\n    // Triple with same subject but different predicate\n    else if (!equalTerms(triple.predicate, predicate)) {\n      predicate = triple.predicate;\n      parts.push(';' + this._newline, this._indent, this.toEntity(predicate));\n    }\n    // Triple with same subject and predicate\n    else {\n      parts.push(',');\n    }\n    parts.push(' ', this.toEntity(triple.object));\n  }\n  parts.push('.');\n\n  return parts.join('');\n}\n\nGenerator.prototype.graph = function (graph) {\n  return 'GRAPH ' + this.toEntity(graph.name) + ' ' + this.group(graph);\n};\n\nGenerator.prototype.graphs = function (keyword, graphs) {\n  return !graphs || graphs.length === 0 ? '' :\n    mapJoin(graphs, '', function (g) { return keyword + this.toEntity(g) + this._newline; }, this)\n}\n\nGenerator.prototype.group = function (group, inline) {\n  group = inline !== true ? this.array(group.patterns || group.triples)\n                          : this.toPattern(group.type !== 'group' ? group : group.patterns);\n  return group.indexOf(this._newline) === -1 ? '{ ' + group + ' }' : '{' + this._newline + this.indent(group) + this._newline + '}';\n};\n\nGenerator.prototype.query = function (query) {\n  return this.toQuery(query);\n};\n\nGenerator.prototype.filter = function (filter) {\n  return 'FILTER(' + this.toExpression(filter.expression) + ')';\n};\n\nGenerator.prototype.bind = function (bind) {\n  return 'BIND(' + this.toExpression(bind.expression) + ' AS ' + variableToString(bind.variable) + ')';\n};\n\nGenerator.prototype.optional = function (optional) {\n  return 'OPTIONAL ' + this.group(optional);\n};\n\nGenerator.prototype.union = function (union) {\n  return mapJoin(union.patterns, this._newline + 'UNION' + this._newline, function (p) { return this.group(p, true); }, this);\n};\n\nGenerator.prototype.minus = function (minus) {\n  return 'MINUS ' + this.group(minus);\n};\n\nGenerator.prototype.values = function (valuesList) {\n  // Gather unique keys\n  var keys = Object.keys(valuesList.values.reduce(function (keyHash, values) {\n    for (var key in values) keyHash[key] = true;\n    return keyHash;\n  }, {}));\n  // Check whether simple syntax can be used\n  var lparen, rparen;\n  if (keys.length === 1) {\n    lparen = rparen = '';\n  } else {\n    lparen = '(';\n    rparen = ')';\n  }\n  // Create value rows\n  return 'VALUES ' + lparen + keys.join(' ') + rparen + ' {' + this._newline +\n    mapJoin(valuesList.values, this._newline, function (values) {\n      return '  ' + lparen + mapJoin(keys, undefined, function (key) {\n        return values[key] ? this.toEntity(values[key]) : 'UNDEF';\n      }, this) + rparen;\n    }, this) + this._newline + '}';\n};\n\nGenerator.prototype.service = function (service) {\n  return 'SERVICE ' + (service.silent ? 'SILENT ' : '') + this.toEntity(service.name) + ' ' +\n         this.group(service);\n};\n\n// Converts the parsed expression object into a SPARQL expression\nGenerator.prototype.toExpression = function (expr) {\n  if (isTerm(expr)) {\n    return this.toEntity(expr);\n  }\n  switch (expr.type.toLowerCase()) {\n    case 'aggregate':\n      return expr.aggregation.toUpperCase() +\n             '(' + (expr.distinct ? 'DISTINCT ' : '') + this.toExpression(expr.expression) +\n             (typeof expr.separator === 'string' ? '; SEPARATOR = ' + '\"' + expr.separator.replace(escape, escapeReplacer) + '\"' : '') + ')';\n    case 'functioncall':\n      return this.toEntity(expr.function) + '(' + mapJoin(expr.args, ', ', this.toExpression, this) + ')';\n    case 'operation':\n      var operator = expr.operator.toUpperCase(), args = expr.args || [];\n      switch (expr.operator.toLowerCase()) {\n      // Infix operators\n      case '<':\n      case '>':\n      case '>=':\n      case '<=':\n      case '&&':\n      case '||':\n      case '=':\n      case '!=':\n      case '+':\n      case '-':\n      case '*':\n      case '/':\n          return (isTerm(args[0]) ? this.toEntity(args[0]) : '(' + this.toExpression(args[0]) + ')') +\n                 ' ' + operator + ' ' +\n                 (isTerm(args[1]) ? this.toEntity(args[1]) : '(' + this.toExpression(args[1]) + ')');\n      // Unary operators\n      case '!':\n        return '!(' + this.toExpression(args[0]) + ')';\n      case 'uplus':\n        return '+(' + this.toExpression(args[0]) + ')';\n      case 'uminus':\n        return '-(' + this.toExpression(args[0]) + ')';\n      // IN and NOT IN\n      case 'notin':\n        operator = 'NOT IN';\n      case 'in':\n        return this.toExpression(args[0]) + ' ' + operator +\n               '(' + (isString(args[1]) ? args[1] : mapJoin(args[1], ', ', this.toExpression, this)) + ')';\n      // EXISTS and NOT EXISTS\n      case 'notexists':\n        operator = 'NOT EXISTS';\n      case 'exists':\n        return operator + ' ' + this.group(args[0], true);\n      // Other expressions\n      default:\n        return operator + '(' + mapJoin(args, ', ', this.toExpression, this) + ')';\n      }\n    default:\n      throw new Error('Unknown expression type: ' + expr.type);\n  }\n};\n\n// Converts the parsed entity (or property path) into a SPARQL entity\nGenerator.prototype.toEntity = function (value) {\n  if (isTerm(value)) {\n    switch (value.termType) {\n    // variable, * selector, or blank node\n    case 'Wildcard':\n      return '*';\n    case 'Variable':\n      return variableToString(value);\n    case 'BlankNode':\n      return '_:' + value.value;\n    // literal\n    case 'Literal':\n      var lexical = value.value || '', language = value.language || '', datatype = value.datatype;\n      value = '\"' + lexical.replace(escape, escapeReplacer) + '\"';\n      if (language){\n        value += '@' + language;\n      } else if (datatype) {\n        // Abbreviate literals when possible\n        if (!this._explicitDatatype) {\n          switch (datatype.value) {\n          case XSD_STRING:\n            return value;\n          case XSD_INTEGER:\n            if (/^\\d+$/.test(lexical))\n              // Add space to avoid confusion with decimals in broken parsers\n              return lexical + ' ';\n          }\n        }\n        value += '^^' + this.encodeIRI(datatype.value);\n      }\n      return value;\n    case 'Quad':\n      if (!this._sparqlStar)\n          throw new Error('SPARQL* support is not enabled');\n\n      if (value.graph && value.graph.termType !== \"DefaultGraph\") {\n        return '<< GRAPH ' +\n          this.toEntity(value.graph) +\n          ' { ' +\n          this.toEntity(value.subject) + ' ' +\n          this.toEntity(value.predicate) + ' ' +\n          this.toEntity(value.object) +\n          ' } ' +\n          ' >>'\n      }\n      else {\n        return (\n          '<< ' +\n          this.toEntity(value.subject) + ' ' +\n          this.toEntity(value.predicate) + ' ' +\n          this.toEntity(value.object) +\n          ' >>'\n        );\n      }\n    // IRI\n    default:\n      return this.encodeIRI(value.value);\n    }\n  }\n  // property path\n  else {\n    var items = value.items.map(this.toEntity, this), path = value.pathType;\n    switch (path) {\n    // prefix operator\n    case '^':\n    case '!':\n      return path + items[0];\n    // postfix operator\n    case '*':\n    case '+':\n    case '?':\n      return '(' + items[0] + path + ')';\n    // infix operator\n    default:\n      return '(' + items.join(path) + ')';\n    }\n  }\n};\nvar escape = /[\"\\\\\\t\\n\\r\\b\\f]/g,\n    escapeReplacer = function (c) { return escapeReplacements[c]; },\n    escapeReplacements = { '\\\\': '\\\\\\\\', '\"': '\\\\\"', '\\t': '\\\\t',\n                           '\\n': '\\\\n', '\\r': '\\\\r', '\\b': '\\\\b', '\\f': '\\\\f' };\n\n// Represent the IRI, as a prefixed name when possible\nGenerator.prototype.encodeIRI = function (iri) {\n  var prefixMatch = this._prefixRegex.exec(iri);\n  if (prefixMatch) {\n    var prefix = this._prefixByIri[prefixMatch[1]];\n    this._usedPrefixes[prefix] = true;\n    return prefix + ':' + prefixMatch[2];\n  }\n  return '<' + iri + '>';\n};\n\n// Converts the parsed update object into a SPARQL update clause\nGenerator.prototype.toUpdate = function (update) {\n  switch (update.type || update.updateType) {\n  case 'load':\n    return 'LOAD' + (update.source ? ' ' + this.toEntity(update.source) : '') +\n           (update.destination ? ' INTO GRAPH ' + this.toEntity(update.destination) : '');\n  case 'insert':\n    return 'INSERT DATA '  + this.group(update.insert, true);\n  case 'delete':\n    return 'DELETE DATA '  + this.group(update.delete, true);\n  case 'deletewhere':\n    return 'DELETE WHERE ' + this.group(update.delete, true);\n  case 'insertdelete':\n    return (update.graph ? 'WITH ' + this.toEntity(update.graph) + this._newline : '') +\n           (update.delete.length ? 'DELETE ' + this.group(update.delete, true) + this._newline : '') +\n           (update.insert.length ? 'INSERT ' + this.group(update.insert, true) + this._newline : '') +\n           (update.using ? this.graphs('USING ', update.using.default) : '') +\n           (update.using ? this.graphs('USING NAMED ', update.using.named) : '') +\n           'WHERE ' + this.group(update.where, true);\n  case 'add':\n  case 'copy':\n  case 'move':\n    return update.type.toUpperCase()+ ' ' +  (update.silent ? 'SILENT ' : '') + (update.source.default ? 'DEFAULT' : this.toEntity(update.source.name)) +\n           ' TO ' + this.toEntity(update.destination.name);\n  case 'create':\n  case 'clear':\n  case 'drop':\n    return update.type.toUpperCase() + (update.silent ? ' SILENT ' : ' ') + (\n      update.graph.default ? 'DEFAULT' :\n      update.graph.named ? 'NAMED' :\n      update.graph.all ? 'ALL' :\n      ('GRAPH ' + this.toEntity(update.graph.name))\n    );\n  default:\n    throw new Error('Unknown update query type: ' + update.type);\n  }\n};\n\n// Indents each line of the string\nGenerator.prototype.indent = function(text) { return text.replace(/^/gm, this._indent); }\n\nfunction variableToString(variable){\n  return '?' + variable.value;\n}\n\n// Checks whether the object is a string\nfunction isString(object) { return typeof object === 'string'; }\n\n// Checks whether the object is a Term\nfunction isTerm(object) {\n  return typeof object.termType === 'string';\n}\n\n// Checks whether term1 and term2 are equivalent without `.equals()` prototype method\nfunction equalTerms(term1, term2) {\n  if (!term1 || !isTerm(term1)) { return false; }\n  if (!term2 || !isTerm(term2)) { return false; }\n  if (term1.termType !== term2.termType) { return false; }\n  switch (term1.termType) {\n    case 'Literal':\n      return term1.value === term2.value\n          && term1.language === term2.language\n          && equalTerms(term1.datatype, term2.datatype);\n    case 'Quad':\n      return equalTerms(term1.subject, term2.subject)\n          && equalTerms(term1.predicate, term2.predicate)\n          && equalTerms(term1.object, term2.object)\n          && equalTerms(term1.graph, term2.graph);\n    default:\n      return term1.value === term2.value;\n  }\n}\n\n// Maps the array with the given function, and joins the results using the separator\nfunction mapJoin(array, sep, func, self) {\n  return array.map(func, self).join(isString(sep) ? sep : ' ');\n}\n\n/**\n * @param options {\n *   allPrefixes: boolean,\n *   indentation: string,\n *   newline: string\n * }\n */\nmodule.exports = function SparqlGenerator(options = {}) {\n  return {\n    stringify: function (query) {\n      var currentOptions = Object.create(options);\n      currentOptions.prefixes = query.prefixes;\n      return new Generator(currentOptions).toQuery(query);\n    },\n    createGenerator: function() { return new Generator(options); }\n  };\n};\n"],"names":[],"mappings":"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","x_google_ignoreList":[0]}