{"version":3,"file":"shex-validator.js","sources":["../../../../../../../../fhircat/fhir-sparql/fhir-sparql-js/node_modules/@shexjs/validator/lib/shex-validator.js"],"sourcesContent":["\"use strict\";\n/* ShExValidator - javascript module to validate a graph with respect to Shape Expressions\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ShExValidator = exports.resultMapToShapeExprTest = exports.ShapeExprValidationContext = exports.InterfaceOptions = void 0;\n// interface constants\nconst ShExTerm = __importStar(require(\"@shexjs/term\"));\nconst term_1 = require(\"@shexjs/term\");\nconst eval_validator_api_1 = require(\"@shexjs/eval-validator-api\");\nconst Hierarchy = __importStar(require(\"hierarchy-closure\"));\nconst neighborhood_api_1 = require(\"@shexjs/neighborhood-api\");\nconst shex_xsd_1 = require(\"./shex-xsd\");\nconst visitor_1 = require(\"@shexjs/visitor\");\nexports.InterfaceOptions = {\n    \"coverage\": {\n        \"firstError\": \"fail on first error (usually used with eval-simple-1err)\",\n        \"exhaustive\": \"find as many errors as possible (usually used with eval-threaded-nerr)\"\n    }\n};\nconst VERBOSE = false; // \"VERBOSE\" in process.env;\nconst EvalThreadedNErr = require(\"@shexjs/eval-threaded-nerr\").RegexpModule;\nclass SemActDispatcherImpl {\n    constructor(externalCode) {\n        this.handlers = {};\n        this.results = {};\n        this.externalCode = externalCode || {};\n    }\n    /**\n     * Store a semantic action handler.\n     *\n     * @param {string} name - semantic action's URL.\n     * @param {SemActHandler} handler - handler function.\n     *\n     * The handler object has a dispatch function is invoked with:\n     *   code: string - text of the semantic action.\n     *   ctx: object - matched triple or results subset.\n     *   extensionStorage: object - place where the extension writes into the result structure.\n     *   return :bool - false if the extension failed or did not accept the ctx object.\n     */\n    register(name, handler) {\n        this.handlers[name] = handler;\n    }\n    /**\n     * Calls all semantic actions, allowing each to write to resultsArtifact.\n     *\n     * @param {ShExJ.SemAct[]} semActs - list of semantic actions to invoke.\n     * @param {any} semActParm - evaluation context for SemAct.\n     * @param {any} resultsArtifact - simple storage for SemAct.\n     * @return {SemActFailure[]} false if any result was false.\n     */\n    dispatchAll(semActs, semActParm, resultsArtifact) {\n        return semActs.reduce((ret, semAct) => {\n            if (ret.length === 0 && semAct.name in this.handlers) {\n                const code = (\"code\" in semAct ? semAct.code : this.externalCode[semAct.name]) || null;\n                const existing = \"extensions\" in resultsArtifact && semAct.name in resultsArtifact.extensions;\n                const extensionStorage = existing ? resultsArtifact.extensions[semAct.name] : {};\n                const response = this.handlers[semAct.name].dispatch(code, semActParm, extensionStorage);\n                if (typeof response === 'object' && Array.isArray(response)) {\n                    if (response.length > 0)\n                        ret.push({ type: \"SemActFailure\", errors: response });\n                }\n                else {\n                    throw Error(\"unsupported response from semantic action handler: \" + JSON.stringify(response));\n                }\n                if (!existing && Object.keys(extensionStorage).length > 0) {\n                    if (!(\"extensions\" in resultsArtifact))\n                        resultsArtifact.extensions = {};\n                    resultsArtifact.extensions[semAct.name] = extensionStorage;\n                }\n                return ret;\n            }\n            return ret;\n        }, []);\n    }\n}\n/**\n * A QueryTracker that's all no-ops.\n */\nclass EmptyTracker {\n    constructor() {\n        this.depth = 0;\n    }\n    recurse(_rec) { }\n    known(_res) { }\n    enter(_term, _shapeLabel) { ++this.depth; }\n    exit(_term, _shapeLabel, _res) { --this.depth; }\n}\nclass ShapeExprValidationContext {\n    constructor(parent, label, // Can only be Start if it's the root of a context list.\n    depth = 0, tracker = new EmptyTracker(), seen = {}, matchTarget = null, subGraph = null) {\n        this.parent = parent;\n        this.label = label;\n        this.depth = depth;\n        this.tracker = tracker;\n        this.seen = seen;\n        this.matchTarget = matchTarget;\n        this.subGraph = subGraph;\n    }\n    checkShapeLabel(label) {\n        return new ShapeExprValidationContext(this, label, this.depth + 1, this.tracker, this.seen, this.matchTarget, this.subGraph);\n    }\n    followTripleConstraint() {\n        return new ShapeExprValidationContext(this, this.label, this.depth + 1, this.tracker, this.seen, this.matchTarget, null);\n    }\n    checkExtendsPartition(subGraph) {\n        return new ShapeExprValidationContext(this, this.label, this.depth + 1, this.tracker, this.seen, this.matchTarget, subGraph);\n    }\n    checkExtendingClass(label, matchTarget) {\n        return new ShapeExprValidationContext(this, label, this.depth + 1, this.tracker, this.seen, matchTarget, this.subGraph);\n    }\n}\nexports.ShapeExprValidationContext = ShapeExprValidationContext;\nclass MapMap {\n    constructor() {\n        this.data = new Map();\n    }\n    set(a, b, t) {\n        if (!this.data.has(a)) {\n            this.data.set(a, new Map());\n        }\n        if (this.data.get(a).has(b)) {\n            throw Error(`Error setting [${a}][${b}]=${t}; already has value ${this.data.get(a).get(b)}`);\n        }\n        this.data.get(a).set(b, t);\n    }\n    get(a, b) {\n        return this.data.get(a).get(b);\n    }\n}\nclass TriplesMatching {\n    constructor(hits, misses) {\n        this.hits = hits;\n        this.misses = misses;\n    }\n}\nclass TriplesMatchingResult {\n    constructor(triple, sub) {\n        this.triple = triple;\n        this.sub = sub;\n    }\n}\nclass TriplesMatchingHit extends TriplesMatchingResult {\n}\nclass TriplesMatchingNoValueConstraint extends TriplesMatchingResult {\n    constructor(triple) {\n        super(triple, undefined); // TODO: could weaken typing on the hits, but also weakens the misses\n    }\n}\nclass TriplesMatchingMiss extends TriplesMatchingResult {\n}\n/**\n * Convert a ResultMap to a shapeExprTest by examining each shape association.\n * TODO: migrate to ShExUtil when ShExUtil is TS-ified\n * @param resultsMap - SolutionList or FailureList depending on whether resultsMap had some errors.\n */\nfunction resultMapToShapeExprTest(resultsMap) {\n    const passFails = resultsMap.reduce((ret, pair) => {\n        const res = pair.appinfo;\n        return \"errors\" in res\n            ? { passes: ret.passes, failures: ret.failures.concat([res]) }\n            : { passes: ret.passes.concat([res]), failures: ret.failures };\n    }, { passes: [], failures: [] });\n    if (passFails.failures.length > 0) {\n        return passFails.failures.length !== 1\n            ? { type: \"FailureList\", errors: passFails.failures }\n            : passFails.failures[0];\n    }\n    else {\n        return passFails.passes.length !== 1\n            ? { type: \"SolutionList\", solutions: passFails.passes }\n            : passFails.passes[0];\n    }\n}\nexports.resultMapToShapeExprTest = resultMapToShapeExprTest;\n/** Directly construct a DB from triples.\n * TODO: should this be in @shexjs/neighborhood-something ?\n */\nclass TrivialNeighborhood {\n    constructor(queryTracker) {\n        this.incoming = [];\n        this.outgoing = [];\n        this.queryTracker = queryTracker;\n    }\n    getTriplesByIRI(s, p, o, _g) {\n        return this.incoming.concat(this.outgoing).filter(t => (!s || s === t.subject) &&\n            (!p || p === t.predicate) &&\n            (!o || o === t.object));\n    }\n    getNeighborhood(_point, _shapeLabel, _shape) {\n        return {\n            outgoing: this.outgoing,\n            incoming: this.incoming\n        };\n    }\n    getSubjects() { throw Error(\"!Triples DB can't index subjects\"); }\n    getPredicates() { throw Error(\"!Triples DB can't index predicates\"); }\n    getObjects() { throw Error(\"!Triples DB can't index objects\"); }\n    getQuads() { throw Error(\"!Triples DB doesn't have Quads\"); }\n    get size() { return this.incoming.length + this.outgoing.length; }\n    addIncomingTriples(tz) { Array.prototype.push.apply(this.incoming, tz); }\n    addOutgoingTriples(tz) { Array.prototype.push.apply(this.outgoing, tz); }\n}\nclass ShExValidator {\n    /* ShExValidator - construct an object for validating a schema.\n     *\n     * schema: a structure produced by a ShEx parser or equivalent.\n     * options: object with controls for\n     *   lax(true): boolean: whine about missing types in schema.\n     *   diagnose(false): boolean: make validate return a structure with errors.\n     */\n    constructor(schema, db, options = {}) {\n        const index = schema._index || visitor_1.ShExIndexVisitor.index(schema);\n        if (index.labelToTcs === undefined) // make sure there's a labelToTcs in the index\n            index.labelToTcs = {};\n        this.index = index;\n        options = options || {};\n        this.options = options;\n        this.known = {};\n        this.schema = schema;\n        this.db = db;\n        // const regexModule = this.options.regexModule || require(\"@shexjs/eval-simple-1err\");\n        this.regexModule = this.options.regexModule || EvalThreadedNErr;\n        this.semActHandler = new SemActDispatcherImpl(options.semActs);\n    }\n    /**\n     * Validate each entry in a fixed ShapeMap, returning a results ShapeMap\n     *\n     * @param shapeMap - list of node/shape pairs to validate\n     * @param tracker - optional implementation of QueryTracker to log validation\n     * @param seen - optional (and discouraged) list of currently-visited node/shape associations -- may be useful for rare wizardry.\n     */\n    validateShapeMap(shapeMap, tracker = new EmptyTracker(), seen = {}) {\n        return shapeMap.reduce((acc, pair) => {\n            // let time = +new Date();\n            const res = this.validateNodeShapePair(ShExTerm.ld2RdfJsTerm(pair.node), pair.shape, tracker, seen);\n            // time = +new Date() - time;\n            return acc.concat([{\n                    node: pair.node,\n                    shape: pair.shape,\n                    status: \"errors\" in res ? \"nonconformant\" : \"conformant\",\n                    appinfo: res,\n                    // elapsed: time\n                }]);\n        }, []);\n    }\n    /**\n     * Validate a single node as a labeled shape expression or as the Start shape\n     *\n     * @param focus - RdfJs Term to validate\n     * @param labelOrStart - label of shapeExpr to validate focus against, or `ShExValidator.Start`.\n     * @param tracker - optional implementation of QueryTracker to log validation\n     * @param seen - optional (and discouraged) list of currently-visited node/shape associations -- may be useful for rare wizardry.\n     */\n    validateNodeShapePair(focus, labelOrStart, tracker = new EmptyTracker(), seen = {}) {\n        const ctx = new ShapeExprValidationContext(null, labelOrStart, 0, tracker, seen, null, null);\n        if (\"startActs\" in this.schema) {\n            const startActionStorage = {}; // !!! need test to see this write to results structure.\n            const semActErrors = this.semActHandler.dispatchAll(this.schema.startActs, null, startActionStorage);\n            if (semActErrors.length)\n                return {\n                    type: \"Failure\",\n                    node: (0, term_1.rdfJsTerm2Ld)(focus),\n                    shape: ctx.label,\n                    errors: semActErrors\n                }; // some semAct aborted !! return a better error\n        }\n        const ret = this.validateShapeLabel(focus, ctx);\n        if (\"startActs\" in this.schema) {\n            ret.startActs = this.schema.startActs;\n        }\n        return ret;\n    }\n    validateShapeLabel(focus, ctx) {\n        if (typeof ctx.label !== \"string\") {\n            if (ctx.label !== ShExValidator.Start)\n                runtimeError(`unknown shape ctx.label ${JSON.stringify(ctx.label)}`);\n            if (!this.schema.start)\n                runtimeError(\"start production not defined\");\n            return this.validateShapeExpr(focus, this.schema.start, ctx);\n        }\n        const seenKey = ShExTerm.rdfJsTerm2Turtle(focus) + \"@\" + ctx.label;\n        if (!ctx.subGraph) { // Don't cache base shape validations as they aren't testing the full neighborhood.\n            if (seenKey in ctx.seen) {\n                let ret = {\n                    type: \"Recursion\",\n                    node: (0, term_1.rdfJsTerm2Ld)(focus),\n                    shape: ctx.label\n                };\n                ctx.tracker.recurse(ret);\n                return ret;\n            }\n            if (\"known\" in this && seenKey in this.known) {\n                const ret = this.known[seenKey];\n                ctx.tracker.known(ret);\n                return ret;\n            }\n            ctx.seen[seenKey] = { node: focus, shape: ctx.label };\n            ctx.tracker.enter(focus, ctx.label);\n        }\n        const ret = this.validateDescendants(focus, ctx.label, ctx, false);\n        if (!ctx.subGraph) {\n            ctx.tracker.exit(focus, ctx.label, ret);\n            delete ctx.seen[seenKey];\n            if (\"known\" in this)\n                this.known[seenKey] = ret;\n        }\n        return ret;\n    }\n    /**\n     * Validate shapeLabel and shapeExprs which extend shapeLabel\n     *\n     * @param focus - focus of validation\n     * @param shapeLabel - same as ctx.label, but with stronger typing (can't be Start)\n     * @param ctx - validation context\n     * @param includeAbstractShapes - if true, don't strip out abstract classes (needed for validating abstract base shapes)\n     */\n    validateDescendants(focus, shapeLabel, ctx, includeAbstractShapes = false) {\n        const _ShExValidator = this;\n        if (ctx.subGraph) { // !! matchTarget?\n            // matchTarget indicates that shape substitution has already been applied.\n            // Now we're testing a subgraph against the base shapes.\n            const res = this.validateShapeDecl(focus, this.lookupShape(shapeLabel), ctx);\n            if (ctx.matchTarget && shapeLabel === ctx.matchTarget.label && !(\"errors\" in res))\n                ctx.matchTarget.count++;\n            return res;\n        }\n        // Find all non-abstract shapeExprs extended with label.\n        let candidates = [shapeLabel];\n        candidates = candidates.concat(indexExtensions(this.schema)[shapeLabel] || []);\n        // Uniquify list.\n        for (let i = candidates.length - 1; i >= 0; --i) {\n            if (candidates.indexOf(candidates[i]) < i)\n                candidates.splice(i, 1);\n        }\n        // Filter out abstract shapes.\n        if (!includeAbstractShapes)\n            candidates = candidates.filter(l => !this.lookupShape(l).abstract);\n        // Aggregate results in a SolutionList or FailureList.\n        const results = candidates.reduce((ret, candidateShapeLabel) => {\n            const shapeExpr = this.lookupShape(candidateShapeLabel);\n            const matchTarget = candidateShapeLabel === shapeLabel ? null : { label: shapeLabel, count: 0 };\n            ctx = ctx.checkExtendingClass(candidateShapeLabel, matchTarget);\n            const res = this.validateShapeDecl(focus, shapeExpr, ctx);\n            return \"errors\" in res || matchTarget && matchTarget.count === 0 ?\n                { passes: ret.passes, failures: ret.failures.concat(res) } :\n                { passes: ret.passes.concat(res), failures: ret.failures };\n        }, { passes: [], failures: [] });\n        let ret;\n        if (results.passes.length > 0) {\n            ret = results.passes.length !== 1 ?\n                { type: \"SolutionList\", solutions: results.passes } :\n                results.passes[0];\n        }\n        else if (results.failures.length > 0) {\n            ret = results.failures.length !== 1 ?\n                { type: \"FailureList\", errors: results.failures } :\n                results.failures[0];\n        }\n        else {\n            ret = {\n                type: \"AbstractShapeFailure\",\n                shape: shapeLabel,\n                errors: [shapeLabel + \" has no non-abstract children\"]\n            };\n        }\n        return ret;\n        // @TODO move to ShExIndexVisitor.index\n        function indexExtensions(schema) {\n            const abstractness = {};\n            const extensions = Hierarchy.create();\n            makeSchemaVisitor().visitSchema(schema);\n            return extensions.children;\n            function makeSchemaVisitor() {\n                const schemaVisitor = new visitor_1.ShExVisitor();\n                let curLabel;\n                let curAbstract;\n                const oldVisitShapeDecl = schemaVisitor.visitShapeDecl;\n                schemaVisitor.visitShapeDecl = function (decl) {\n                    curLabel = decl.id;\n                    curAbstract = decl.abstract;\n                    abstractness[decl.id] = !!decl.abstract;\n                    return oldVisitShapeDecl.call(schemaVisitor, decl, decl.id);\n                };\n                schemaVisitor.visitShape = function (shape) {\n                    if (shape.extends !== undefined) {\n                        shape.extends.forEach(ext => {\n                            const extendsVisitor = new visitor_1.ShExVisitor();\n                            extendsVisitor.visitExpression = function (_expr, ..._args) { return \"null\"; };\n                            extendsVisitor.visitShapeRef = function (reference, ..._args) {\n                                extensions.add(reference, curLabel);\n                                extendsVisitor.visitShapeDecl(_ShExValidator.lookupShape(reference));\n                                // makeSchemaVisitor().visitSchema(schema);\n                                return \"null\";\n                            };\n                            extendsVisitor.visitShapeExpr(ext);\n                        });\n                    }\n                    return \"null\";\n                };\n                return schemaVisitor;\n            }\n        }\n    }\n    /**\n     * Validate a ShapeDecl, including any shapes it restricts\n     *\n     * @param focus - focus of validation\n     * @param shapeDecl - ShExJ ShapeDecl object\n     * @param ctx - validation context\n     */\n    validateShapeDecl(focus, shapeDecl, ctx) {\n        const conjuncts = (shapeDecl.restricts || []).concat([shapeDecl.shapeExpr]);\n        const expr = conjuncts.length === 1\n            ? conjuncts[0]\n            : { type: \"ShapeAnd\", shapeExprs: conjuncts };\n        return this.validateShapeExpr(focus, expr, ctx);\n    }\n    lookupShape(label) {\n        const shapes = this.schema.shapes;\n        if (shapes === undefined) {\n            runtimeError(\"shape \" + label + \" not found; no shapes in schema\");\n        }\n        else if (label in this.index.shapeExprs) {\n            return this.index.shapeExprs[label];\n        }\n        runtimeError(\"shape \" + label + \" not found in:\\n\" + Object.keys(this.index.shapeExprs || []).map(s => \"  \" + s).join(\"\\n\"));\n    }\n    validateShapeExpr(focus, shapeExpr, ctx) {\n        if (typeof shapeExpr === \"string\") { // ShapeRef\n            return this.validateShapeLabel(focus, ctx.checkShapeLabel(shapeExpr));\n        }\n        switch (shapeExpr.type) {\n            case \"NodeConstraint\":\n                return this.validateNodeConstraint(focus, shapeExpr, ctx);\n            case \"Shape\":\n                return this.validateShape(focus, shapeExpr, ctx);\n            case \"ShapeExternal\":\n                if (typeof this.options.validateExtern !== \"function\")\n                    throw runtimeError(`validating ${ShExTerm.shExJsTerm2Turtle(focus)} as EXTERNAL shapeExpr ${ctx.label} requires a 'validateExtern' option`);\n                return this.options.validateExtern(focus, ctx.label, ctx.checkShapeLabel(ctx.label));\n            case \"ShapeOr\":\n                const orErrors = [];\n                for (let i = 0; i < shapeExpr.shapeExprs.length; ++i) {\n                    const nested = shapeExpr.shapeExprs[i];\n                    const sub = this.validateShapeExpr(focus, nested, ctx);\n                    if (\"errors\" in sub)\n                        orErrors.push(sub);\n                    else if (!ctx.matchTarget || ctx.matchTarget.count > 0)\n                        return { type: \"ShapeOrResults\", solution: sub };\n                }\n                return { type: \"ShapeOrFailure\", errors: orErrors };\n            case \"ShapeNot\":\n                const sub = this.validateShapeExpr(focus, shapeExpr.shapeExpr, ctx);\n                return (\"errors\" in sub)\n                    ? { type: \"ShapeNotResults\", solution: sub }\n                    : { type: \"ShapeNotFailure\", errors: sub }; // ugh\n            case \"ShapeAnd\":\n                const andPasses = [];\n                const andErrors = [];\n                for (let i = 0; i < shapeExpr.shapeExprs.length; ++i) {\n                    const nested = shapeExpr.shapeExprs[i];\n                    const sub = this.validateShapeExpr(focus, nested, ctx);\n                    if (\"errors\" in sub)\n                        andErrors.push(sub);\n                    else\n                        andPasses.push(sub);\n                }\n                return andErrors.length > 0\n                    ? { type: \"ShapeAndFailure\", errors: andErrors }\n                    : { type: \"ShapeAndResults\", solutions: andPasses };\n            default:\n                throw Error(\"expected one of Shape{Ref,And,Or} or NodeConstraint, got \" + JSON.stringify(shapeExpr));\n        }\n    }\n    // TODO: should this be called for and, or, not?\n    evaluateShapeExprSemActs(ret, shapeExpr, point, shapeLabel) {\n        if (!(\"errors\" in ret) && shapeExpr.semActs !== undefined) {\n            const semActErrors = this.semActHandler.dispatchAll(shapeExpr.semActs, Object.assign({ node: point }, ret), ret);\n            if (semActErrors.length)\n                // some semAct aborted\n                return { type: \"Failure\", node: (0, term_1.rdfJsTerm2Ld)(point), shape: shapeLabel, errors: semActErrors };\n        }\n        return ret;\n    }\n    validateShape(focus, shape, ctx) {\n        let ret = null;\n        const fromDB = (ctx.subGraph || this.db).getNeighborhood(focus, ctx.label, shape);\n        const neighborhood = fromDB.outgoing.concat(fromDB.incoming);\n        const { extendsTCs, tc2exts, localTCs } = this.TripleConstraintsVisitor(this.index.labelToTcs).getAllTripleConstraints(shape);\n        const tripleConstraints = extendsTCs.concat(localTCs);\n        // neighborhood already integrates subGraph so don't pass to _errorsMatchingShapeExpr\n        const { t2tcs, t2tcErrors, tc2TResults } = this.matchByPredicate(tripleConstraints, fromDB, ctx);\n        const { missErrors, matchedExtras } = this.whatsMissing(t2tcs, t2tcErrors, shape.extra || []);\n        const allT2TCs = new TripleToTripleConstraints(t2tcs, extendsTCs, tc2exts);\n        const partitionErrors = [];\n        // only construct a regexp engine if shape has a triple expression\n        const regexEngine = shape.expression === undefined ? null : this.regexModule.compile(this.schema, shape, this.index);\n        for (let t2tc = allT2TCs.next(); t2tc !== null && ret === null; t2tc = allT2TCs.next()) {\n            const { errors, results } = this.tryPartition(t2tc, focus, shape, ctx, extendsTCs, tc2exts, matchedExtras, tripleConstraints, tc2TResults, fromDB.outgoing, regexEngine);\n            const possibleRet = { type: \"ShapeTest\", node: (0, term_1.rdfJsTerm2Ld)(focus), shape: ctx.label };\n            if (errors.length === 0 && results !== null) // only include .solution for non-empty pattern\n                // @ts-ignore TODO\n                possibleRet.solution = results;\n            if (\"semActs\" in shape) {\n                const semActErrors = this.semActHandler.dispatchAll(shape.semActs, Object.assign({ node: focus }, results), possibleRet);\n                if (semActErrors.length)\n                    // some semAct aborted\n                    Array.prototype.push.apply(errors, semActErrors);\n            }\n            partitionErrors.push(errors);\n            if (errors.length === 0)\n                ret = possibleRet;\n        }\n        // Report only last errors until we have a better idea.\n        const lastErrors = partitionErrors[partitionErrors.length - 1];\n        let errors = missErrors.concat(lastErrors.length === 1 ? lastErrors[0] : lastErrors);\n        if (errors.length > 0)\n            ret = {\n                type: \"Failure\",\n                node: (0, term_1.rdfJsTerm2Ld)(focus),\n                shape: ctx.label,\n                errors: errors\n            };\n        // remove N3jsTripleToString\n        if (VERBOSE)\n            neighborhood.forEach(function (t) {\n                // @ts-ignore\n                delete t.toString;\n            });\n        return this.addShapeAttributes(shape, ret);\n    }\n    /**\n     * Try a mapping of triples to triple constraints\n     *\n     * @param t2tc mapping from triples to triple constraints\n     * @param focus node being validated\n     * @param shape against a give shape\n     * @param ctx validation context\n     * @param extendsTCs all triple constraints shape transitively extends\n     * @param tc2exts mapping of extended triple constraint to position in EXTENDS\n     * @param matchedExtras triples allowed by EXTRA\n     * @param tripleConstraints triple constraints composing shape\n     * @param results mapping from triple to nested validation result\n     * @param outgoing triples to check for ClosedShapeViolation\n     * @param regexEngine engine to use to test regular triple expression\n     * @private\n     */\n    tryPartition(t2tc, focus, shape, ctx, extendsTCs, tc2exts, matchedExtras, tripleConstraints, t2tcErrors, outgoing, regexEngine) {\n        const tc2ts = new eval_validator_api_1.MapArray();\n        tripleConstraints.forEach(tc => tc2ts.empty(tc));\n        const unexpectedTriples = [];\n        const extendsToTriples = _seq((shape.extends || []).length).map(() => []);\n        t2tc.forEach((tripleConstraint, triple) => {\n            if (extendsTCs.indexOf(tripleConstraint) !== -1) {\n                // allocate to EXTENDS\n                for (let extNo of tc2exts.get(tripleConstraint)) {\n                    // allocated to multiple extends if diamond inheritance\n                    extendsToTriples[extNo].push(triple);\n                }\n            }\n            else {\n                // allocate to local shape\n                tc2ts.add(tripleConstraint, { triple: triple, res: t2tcErrors.get(tripleConstraint, triple) });\n            }\n        });\n        outgoing.forEach(triple => {\n            if (!t2tc.has(triple) // didn't match anything\n                && matchedExtras.indexOf(triple) === -1) // isn't in EXTRAs\n                unexpectedTriples.push(triple);\n        });\n        const errors = [];\n        // Triples not mapped to triple constraints are not allowed in closed shapes.\n        if (shape.closed && unexpectedTriples.length > 0 && !this.options.ignoreClosed) {\n            errors.push({\n                type: \"ClosedShapeViolation\",\n                unexpectedTriples: unexpectedTriples.map(q => {\n                    return {\n                        subject: (0, term_1.rdfJsTerm2Ld)(q.subject),\n                        predicate: (0, term_1.rdfJsTerm2Ld)(q.predicate),\n                        object: (0, term_1.rdfJsTerm2Ld)(q.object),\n                    };\n                })\n            });\n        }\n        let results = this.testExtends(shape, focus, extendsToTriples, ctx);\n        if (results === null || !(\"errors\" in results)) {\n            if (regexEngine !== null /* i.e. shape.expression !== undefined */) {\n                const sub = regexEngine.match(focus, tc2ts, this.semActHandler, null);\n                if (!(\"errors\" in sub) && results) {\n                    results = { type: \"ExtendedResults\", extensions: results, local: sub };\n                }\n                else {\n                    results = sub;\n                }\n            }\n            else if (results) { // constructs { ExtendedResults, extensions: { ExtensionResults ... } with no local: { ... } }\n                results = { type: \"ExtendedResults\", extensions: results }; // TODO: keep that redundant nesting for consistency?\n            }\n        }\n        // TODO: what if results is a TypedError (i.e. not a container of further errors)?\n        if (results !== null && results.errors !== undefined)\n            Array.prototype.push.apply(errors, results.errors);\n        return { errors, results };\n    }\n    /**\n     * For each TripleConstraint TC, for each triple T | T.p === TC.p, get the result of testing the value constraint.\n     * @param constraintList - list of TripleConstraint\n     * @param neighborhood - list of Quad\n     * @param ctx - evaluation context\n     */\n    matchByPredicate(constraintList, neighborhood, ctx) {\n        const _ShExValidator = this;\n        const outgoing = indexNeighborhood(neighborhood.outgoing);\n        const incoming = indexNeighborhood(neighborhood.incoming);\n        const init = { t2tcErrors: new Map(), tc2TResults: new MapMap(), t2tcs: new eval_validator_api_1.MapArray() };\n        [neighborhood.outgoing, neighborhood.incoming].forEach(quads => quads.forEach(triple => init.t2tcs.data.set(triple, [])));\n        return constraintList.reduce(function (ret, constraint) {\n            // subject and object depend on direction of constraint.\n            const index = constraint.inverse ? incoming : outgoing;\n            // get triples matching predicate\n            const matchPredicate = index.byPredicate.get(constraint.predicate) ||\n                []; // empty list when no triple matches that constraint\n            // strip to triples matching value constraints (apart from @<someShape>)\n            const matchConstraints = _ShExValidator.triplesMatchingShapeExpr(matchPredicate, constraint, ctx);\n            matchConstraints.hits.forEach(function (evidence) {\n                ret.t2tcs.add(evidence.triple, constraint);\n                ret.tc2TResults.set(constraint, evidence.triple, evidence.sub);\n            });\n            matchConstraints.misses.forEach(function (evidence) {\n                ret.t2tcErrors.set(evidence.triple, { constraint: constraint, errors: evidence.sub });\n            });\n            return ret;\n        }, init);\n    }\n    whatsMissing(t2tcs, misses, extras) {\n        const matchedExtras = []; // triples accounted for by EXTRA\n        const missErrors = t2tcs.reduce((ret, t, constraints) => {\n            if (constraints.length === 0 && // matches no constraints\n                misses.has(t)) { // predicate matched some constraint(s)\n                if (extras.indexOf(t.predicate.value) !== -1) {\n                    matchedExtras.push(t);\n                }\n                else { // not declared extra\n                    ret.push({\n                        type: \"TypeMismatch\",\n                        triple: { type: \"TestedTriple\", subject: (0, term_1.rdfJsTerm2Ld)(t.subject), predicate: (0, term_1.rdfJsTerm2Ld)(t.predicate), object: (0, term_1.rdfJsTerm2Ld)(t.object) },\n                        constraint: misses.get(t).constraint,\n                        errors: misses.get(t).errors\n                    });\n                }\n            }\n            return ret;\n        }, []);\n        return { missErrors, matchedExtras };\n    }\n    addShapeAttributes(shape, ret) {\n        if (shape.annotations !== undefined) { // @ts-ignore TODO: where can annotations appear in results?\n            ret.annotations = shape.annotations;\n        }\n        return ret;\n    }\n    testExtends(expr, focus, extendsToTriples, ctx) {\n        if (expr.extends === undefined)\n            return null;\n        const passes = [];\n        const errors = [];\n        for (let eNo = 0; eNo < expr.extends.length; ++eNo) {\n            const extend = expr.extends[eNo];\n            const subgraph = new TrivialNeighborhood(null); // These triples were tracked earlier.\n            extendsToTriples[eNo].forEach(t => subgraph.addOutgoingTriples([t]));\n            ctx = ctx.checkExtendsPartition(subgraph); // new context with subgraph\n            const sub = this.validateShapeExpr(focus, extend, ctx);\n            if (\"errors\" in sub)\n                errors.push(sub);\n            else\n                passes.push(sub);\n        }\n        if (errors.length > 0) {\n            return { type: \"ExtensionFailure\", errors: errors };\n        }\n        return { type: \"ExtensionResults\", solutions: passes };\n    }\n    /** TripleConstraintsVisitor - walk shape's extends to get all\n     * referenced triple constraints.\n     *\n     * @param {} labelToTcs: Map<shapeLabel, TripleConstraint[]>\n     * @returns { extendsTCs: [[TripleConstraint]], localTCs: [TripleConstraint] }\n     */\n    TripleConstraintsVisitor(labelToTcs) {\n        const _ShExValidator = this;\n        const visitor = new visitor_1.ShExVisitor(labelToTcs);\n        function emptyShapeExpr() { return []; }\n        visitor.visitShapeDecl = function (decl, _min, _max) {\n            // if (labelToTcs.has(decl.id)) !! uncomment cache for production\n            //   return labelToTcs[decl.id];\n            labelToTcs[decl.id] = decl.shapeExpr\n                ? visitor.visitShapeExpr(decl.shapeExpr, 1, 1)\n                : emptyShapeExpr();\n            return [{ type: \"Ref\", ref: decl.id }];\n        };\n        visitor.visitShapeOr = function (shapeExpr, _min, max) {\n            return shapeExpr.shapeExprs.reduce((acc, disjunct) => acc.concat(this.visitShapeExpr(disjunct, 0, max)), emptyShapeExpr());\n        };\n        visitor.visitShapeAnd = function (shapeExpr, min, max) {\n            const seen = new Set();\n            return shapeExpr.shapeExprs.reduce((acc, disjunct) => {\n                this.visitShapeExpr(disjunct, min, max).forEach((tc) => {\n                    const key = `${tc.min} ${tc.max} ${tc.predicate}`;\n                    if (!seen.has(key)) {\n                        seen.add(key);\n                        acc.push(tc);\n                    }\n                });\n                return acc;\n            }, []);\n        };\n        visitor.visitShapeNot = function (expr, _min, _max) {\n            throw Error(`don't know what to do when extending ${JSON.stringify(expr)}`);\n        };\n        visitor.visitShapeExternal = emptyShapeExpr;\n        visitor.visitNodeConstraint = emptyShapeExpr;\n        // Override visitShapeRef to follow references.\n        // tests: Extend3G-pass, vitals-RESTRICTS-pass_lie-Vital...\n        visitor.visitShapeRef = function (shapeLabel, min, max) {\n            return visitor.visitShapeDecl(_ShExValidator.lookupShape(shapeLabel), min, max);\n        };\n        visitor.visitShape = function (shape, min, max) {\n            const { extendsTCs, localTCs } = shapePieces(shape, min, max);\n            return extendsTCs.flat().concat(localTCs);\n        };\n        // Visit shape's EXTENDS and expression.\n        function shapePieces(shape, min, max) {\n            const extendsTCs = shape.extends !== undefined\n                ? shape.extends.map(ext => visitor.visitShapeExpr(ext, min, max))\n                : [];\n            const localTCs = shape.expression === undefined\n                ? []\n                : visitor.visitExpression(shape.expression, min, max);\n            return { extendsTCs, localTCs };\n        }\n        function getAllTripleConstraints(shape) {\n            const { extendsTCs: extendsTcOrRefsz, localTCs } = shapePieces(shape, 1, 1);\n            const tcs = [];\n            const tc2exts = new Map();\n            extendsTcOrRefsz.map((tcOrRefs, ord) => flattenExtends(tcOrRefs, ord));\n            return { extendsTCs: tcs, tc2exts, localTCs };\n            function flattenExtends(tcOrRefs, ord) {\n                return tcOrRefs.forEach(tcOrRef => {\n                    if (tcOrRef.type === \"TripleConstraint\") {\n                        add(tcOrRef); // as TC\n                    }\n                    else {\n                        flattenExtends(labelToTcs[tcOrRef.ref], ord);\n                    }\n                });\n                function add(tc) {\n                    const idx = tcs.indexOf(tc);\n                    if (idx === -1) {\n                        // new TC\n                        tcs.push(tc);\n                        tc2exts.set(tc, [ord]);\n                    }\n                    else {\n                        // ref to TC already seen in this or earlier EXTENDS\n                        if (tc2exts.get(tc).indexOf(ord) === -1) {\n                            // not yet included in this EXTENDS\n                            tc2exts.get(tc).push(ord);\n                        }\n                    }\n                }\n            }\n        }\n        // tripleExprs return list of TripleConstraints\n        function n(l, expr) {\n            if (expr.min === undefined)\n                return l;\n            return l * expr.min;\n        }\n        function x(l, expr) {\n            if (expr.max === undefined)\n                return l;\n            if (l === -1 || expr.max === -1)\n                return -1;\n            return l * expr.max;\n        }\n        function and(tes) {\n            return Array.prototype.concat.apply([], tes);\n        }\n        // Any TC inside a OneOf implicitly has a min cardinality of 0.\n        visitor.visitOneOf = function (expr, _outerMin, outerMax) {\n            return and(expr.expressions.map(nested => visitor.visitTripleExpr(nested, 0, x(outerMax, expr))));\n        };\n        visitor.visitEachOf = function (expr, outerMin, outerMax) {\n            return and(expr.expressions.map(nested => visitor.visitTripleExpr(nested, n(outerMin, expr), x(outerMax, expr))));\n        };\n        visitor.visitInclusion = function (inclusion, outerMin, outerMax) {\n            return visitor.visitTripleExpr(_ShExValidator.index.tripleExprs[inclusion], outerMin, outerMax);\n        };\n        // Synthesize a TripleConstraint with the implicit cardinality.\n        visitor.visitTripleConstraint = function (expr, _outerMin, _outerMax) {\n            return [expr];\n            /* eval-threaded-n-err counts on t2tcs.indexOf(expr) so we can't optimize with:\n               const ret = JSON.parse(JSON.stringify(expr));\n               ret.min = n(outerMin, expr);\n               ret.max = x(outerMax, expr);\n               return [ret];\n            */\n        };\n        return { getAllTripleConstraints };\n    }\n    triplesMatchingShapeExpr(triples, constraint, ctx) {\n        const _ShExValidator = this;\n        const misses = [];\n        const hits = [];\n        for (const triple of triples) {\n            const value = constraint.inverse ? triple.subject : triple.object;\n            const oldBindings = JSON.parse(JSON.stringify(_ShExValidator.semActHandler.results));\n            if (constraint.valueExpr === undefined)\n                hits.push(new TriplesMatchingNoValueConstraint(triple));\n            else {\n                ctx = ctx.followTripleConstraint();\n                const sub = _ShExValidator.validateShapeExpr(value, constraint.valueExpr, ctx);\n                if (sub.errors === undefined) { // TODO: improve typing to cast isn't necessary\n                    hits.push(new TriplesMatchingHit(triple, sub));\n                }\n                else /* !! if (!hits.find(h => h.triple === triple)) */ {\n                    _ShExValidator.semActHandler.results = JSON.parse(JSON.stringify(oldBindings));\n                    misses.push(new TriplesMatchingMiss(triple, sub));\n                }\n            }\n        }\n        return new TriplesMatching(hits, misses);\n    }\n    /* validateNodeConstraint - return whether the value matches the value\n     * expression without checking shape references.\n     */\n    validateNodeConstraint(focus, nc, ctx) {\n        const errors = [];\n        function validationError(...s) {\n            const errorStr = Array.prototype.join.call(s, \"\");\n            errors.push(\"Error validating \" + ShExTerm.rdfJsTerm2Turtle(focus) + \" as \" + JSON.stringify(nc) + \": \" + errorStr);\n            return false;\n        }\n        if (nc.nodeKind !== undefined) {\n            if ([\"iri\", \"bnode\", \"literal\", \"nonliteral\"].indexOf(nc.nodeKind) === -1) {\n                validationError(`unknown node kind '${nc.nodeKind}'`);\n            }\n            if (focus.termType === \"BlankNode\") {\n                if (nc.nodeKind === \"iri\" || nc.nodeKind === \"literal\") {\n                    validationError(`blank node found when ${nc.nodeKind} expected`);\n                }\n            }\n            else if (focus.termType === \"Literal\") {\n                if (nc.nodeKind !== \"literal\") {\n                    validationError(`literal found when ${nc.nodeKind} expected`);\n                }\n            }\n            else if (nc.nodeKind === \"bnode\" || nc.nodeKind === \"literal\") {\n                validationError(`iri found when ${nc.nodeKind} expected`);\n            }\n        }\n        if (nc.datatype && nc.values)\n            validationError(\"found both datatype and values in \" + nc);\n        if (nc.values !== undefined) {\n            if (!nc.values.some(valueSetValue => testValueSetValue(valueSetValue, focus))) {\n                validationError(`value ${(focus.value)} not found in set ${JSON.stringify(nc.values)}`);\n            }\n        }\n        const numeric = (0, shex_xsd_1.getNumericDatatype)(focus);\n        if (nc.datatype !== undefined) {\n            (0, shex_xsd_1.testKnownTypes)(focus, validationError, term_1.rdfJsTerm2Ld, nc.datatype, numeric, focus.value);\n        }\n        (0, shex_xsd_1.testFacets)(nc, focus.value, validationError, numeric);\n        const ncRet = Object.assign({}, {\n            type: null,\n            node: (0, term_1.rdfJsTerm2Ld)(focus)\n        }, (ctx.label ? { shape: ctx.label } : {}), { shapeExpr: nc });\n        Object.assign(ncRet, errors.length > 0\n            ? { type: \"NodeConstraintViolation\", errors: errors }\n            : { type: \"NodeConstraintTest\", });\n        return this.evaluateShapeExprSemActs(ncRet, nc, focus, ctx.label);\n    }\n}\nexports.ShExValidator = ShExValidator;\nShExValidator.Start = neighborhood_api_1.Start;\nShExValidator.InterfaceOptions = exports.InterfaceOptions;\nShExValidator.type = \"ShExValidator\";\nfunction testLanguageStem(typedValue, stem) {\n    const trail = typedValue.substring(stem.length);\n    return (typedValue !== \"\" && typedValue.startsWith(stem) && (stem === \"\" || trail === \"\" || trail[0] === \"-\"));\n}\nfunction valueInExclusions(exclusions, value) {\n    return exclusions.some(exclusion => {\n        if (typeof exclusion === \"string\") { // Iri\n            return (value === exclusion);\n        }\n        else if (typeof exclusion === \"object\" // Literal\n            && exclusion.type !== undefined\n            && !exclusion.type.match(/^(?:Iri|Literal|Language)(?:Stem(?:Range)?)?$/)) {\n            return (value === exclusion.value);\n        }\n        else {\n            const valueConstraint = exclusion;\n            switch (valueConstraint.type) {\n                // \"Iri\" covered above\n                case \"IriStem\":\n                    return (value.startsWith(valueConstraint.stem));\n                // \"Literal\" covered above\n                case \"LiteralStem\":\n                    return (value.startsWith(valueConstraint.stem));\n                case \"Language\":\n                    return (value === valueConstraint.languageTag);\n                case \"LanguageStem\":\n                    return testLanguageStem(value, valueConstraint.stem);\n            }\n        }\n        return false;\n    });\n}\nfunction testValueSetValue(valueSetValueP, value) {\n    if (typeof valueSetValueP === \"string\") { // Iri\n        return (value.termType === \"NamedNode\" && value.value === valueSetValueP);\n    }\n    else if (typeof valueSetValueP === \"object\" // Literal\n        && (valueSetValueP.type === undefined\n            || !valueSetValueP.type.match(/^(?:Iri|Literal|Language)(?:Stem(?:Range)?)?$/))) {\n        if (value.termType !== \"Literal\") {\n            return false;\n        }\n        else {\n            const vsValueLiteral = valueSetValueP;\n            const valLiteral = value;\n            return (value.value === vsValueLiteral.value\n                && (vsValueLiteral.language === undefined || vsValueLiteral.language === valLiteral.language)\n                && (vsValueLiteral.type === undefined || vsValueLiteral.type === valLiteral.datatype.value));\n        }\n    }\n    else {\n        // Do a little dance to rule out ObjectLiteral and IRIREF\n        const valueSetValue = valueSetValueP;\n        switch (valueSetValue.type) {\n            // \"Iri\" covered above\n            case \"IriStem\":\n                if (value.termType !== \"NamedNode\")\n                    return false;\n                return (value.value.startsWith(valueSetValue.stem));\n            case \"IriStemRange\":\n                if (value.termType !== \"NamedNode\")\n                    return false;\n                if (typeof valueSetValue.stem === \"string\" && !value.value.startsWith(valueSetValue.stem))\n                    return false;\n                return (!valueInExclusions(valueSetValue.exclusions, value.value));\n            // \"Literal\" covered above\n            case \"LiteralStem\":\n                if (value.termType !== \"Literal\")\n                    return false;\n                return (value.value.startsWith(valueSetValue.stem));\n            case \"LiteralStemRange\":\n                if (value.termType !== \"Literal\")\n                    return false;\n                if (typeof valueSetValue.stem === \"string\" && !value.value.startsWith(valueSetValue.stem))\n                    return false;\n                return (!valueInExclusions(valueSetValue.exclusions, value.value));\n            case \"Language\":\n                if (value.termType !== \"Literal\")\n                    return false;\n                return (value.language === valueSetValue.languageTag);\n            case \"LanguageStem\":\n                if (value.termType !== \"Literal\")\n                    return false;\n                return testLanguageStem(value.language, valueSetValue.stem);\n            case \"LanguageStemRange\":\n                if (value.termType !== \"Literal\")\n                    return false;\n                if (typeof valueSetValue.stem === \"string\" && !testLanguageStem(value.language, valueSetValue.stem))\n                    return false;\n                return (!valueInExclusions(valueSetValue.exclusions, value.language));\n        }\n    }\n}\nconst NoTripleConstraint = Symbol('NO_TRIPLE_CONSTRAINT');\n/** Explore permutations of mapping from Triples to TripleConstraints\n * documented using test ExtendsRepeatedP-pass\n */\nclass TripleToTripleConstraints {\n    /**\n     *\n     * @param constraintList mapping from Triple to possible TripleConstraints, e.g. [\n     *      [0,2,4], # try T0 against TC0, TC2, TC4\n     *      [0,2,4], # try T1 against same\n     *      [0,2,4], # try T2 against same\n     *      [1,3]    # try T3 against TC1, TC3\n     *   ]\n     * @param extendsTCs how many TCs are in EXTENDS,\n     *   e.g. 4 says that TCs 0-3 are assigned to some EXTENDS; only TC4 is \"local\".\n     * @param tc2exts which TripleConstraints came from which EXTENDS, e.g. [\n     *     [0], # TC0 is assignable to EXTENDS 0\n     *     [0], # TC1 is assignable to EXTENDS 0\n     *     [0], # TC2 is assignable to EXTENDS 0\n     *     [0], # TC3 is assignable to EXTENDS 0\n     *   ]\n     */\n    constructor(constraintList, extendsTCs, tc2exts) {\n        this.uniqueTCs = [];\n        this.extendsTCs = extendsTCs;\n        this.tc2exts = tc2exts;\n        this.subgraphCache = new Map();\n        this.crossProduct = CrossProduct(constraintList, NoTripleConstraint);\n    }\n    /**\n     * Find next mapping of Triples to TripleConstraints.\n     * Exclude any that differ only in an irrelevant order difference in assignment to EXTENDS.\n     * @returns {(Quad | null}\n     */\n    next() {\n        while (this.crossProduct.next()) {\n            /* t2tc - array mapping neighborhood index to TripleConstraint\n             * CrossProduct counts through t2tcs from the right:\n             *   [ 0, 0, 0, 1 ] # first call\n             *   [ 0, 0, 0, 3 ] # second call\n             *   [ 0, 0, 2, 1 ] # third call\n             *   [ 0, 0, 2, 3 ] # fourth call\n             *   [ 0, 0, 4, 1 ] # fifth call\n             *   [ 0, 2, 0, 1 ] # sixth call...\n             */\n            const t2tc = this.crossProduct.get(); // [0,1,0,3] mapping from triple to constraint\n            // if (DBG_gonnaMatch (t2tc, fromDB, t2tcs)) debugger;\n            /* If this permutation repeats the same assignments to EXTENDS parents, continue to next permutation.\n               Test extends-abstract-multi-empty_fail-Ref1ExtraP includes e.g. \"_-L4-E0-E0-E0-_\" from:\n               t2tc: [ NoTripleConstraint, 4, 2, 1, 3, NoTripleConstraint ]\n               tc2exts: [[0], [0], [0], [0]] (All four TCs assignable to first EXTENDS.)\n            */\n            const subgraphKey = [...t2tc.entries()].map(([_triple, tripleConstraint]) => this.extendsTCs.indexOf(tripleConstraint) !== -1\n                ? '' + this.tc2exts.get(tripleConstraint).map(eNo => 'E' + eNo)\n                : 'L' + this.getUniqueTcNo(tripleConstraint)).join('-');\n            if (!this.subgraphCache.has(subgraphKey)) {\n                this.subgraphCache.set(subgraphKey, true);\n                return t2tc;\n            }\n        }\n        return null;\n    }\n    getUniqueTcNo(tripleConstraint) {\n        let idx = this.uniqueTCs.indexOf(tripleConstraint);\n        if (idx === -1) {\n            idx = this.uniqueTCs.length;\n            this.uniqueTCs.push(tripleConstraint);\n        }\n        return idx;\n    }\n}\n/**\n * Create a cross-product iterator that walks through all permutations of assigning a set of keys to one of their associated values.\n *\n * started from http://stackoverflow.com/questions/9422386/lazy-cartesian-product-of-arrays-arbitrary-nested-loops\n * TODO: make NoConstraint be part of CrossProduct rather than an externally-supplied value.\n *\n * @param sets Map from key to array of values\n * @param emptyValue a term that won't appear in the values that can be used for internal logic\n * @constructor\n */\nfunction CrossProduct(sets, emptyValue) {\n    const n = sets.length, carets = [];\n    const keys = [...sets.keys];\n    let args = null;\n    function init() {\n        args = [];\n        for (let i = 0; i < n; i++) {\n            carets[i] = 0;\n            args[i] = sets.get(keys[i]).length > 0 ? sets.get(keys[i])[0] : emptyValue;\n        }\n    }\n    function next() {\n        // special case: crossProduct([]).next().next() returns false.\n        if (args !== null && args.length === 0)\n            return false;\n        if (args === null) {\n            init();\n            return true;\n        }\n        let i = n - 1;\n        carets[i]++;\n        if (carets[i] < sets.get(keys[i]).length) {\n            args[i] = sets.get(keys[i])[carets[i]];\n            return true;\n        }\n        while (carets[i] >= sets.get(keys[i]).length) {\n            if (i === 0) {\n                return false;\n            }\n            carets[i] = 0;\n            args[i] = sets.get(keys[i]).length > 0 ? sets.get(keys[i])[0] : emptyValue;\n            carets[--i]++;\n        }\n        args[i] = sets.get(keys[i])[carets[i]];\n        return true;\n    }\n    return {\n        next: next,\n        // do: function (block, _context) { // old API\n        //   return block.apply(_context, args);\n        // },\n        // new API because\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments#Description\n        // cautions about functions over arguments.\n        get: function () {\n            return args.reduce((acc, listElt, ord) => {\n                if (listElt !== emptyValue)\n                    acc.set(keys[ord], listElt);\n                return acc;\n            }, new Map());\n        }\n    };\n}\n/* N3jsTripleToString - simple toString function to make N3.js's triples\n * printable.\n */\nconst N3jsTripleToString = function () {\n    function fmt(n) {\n        return n.termType === \"Literal\" ?\n            [\"http://www.w3.org/2001/XMLSchema#integer\",\n                \"http://www.w3.org/2001/XMLSchema#float\",\n                \"http://www.w3.org/2001/XMLSchema#double\"\n            ].indexOf(n.datatype.value) !== -1 ?\n                parseInt(n.value) :\n                n :\n            n.termType === \"BlankNode\" ?\n                n :\n                \"<\" + n + \">\";\n    }\n    // @ts-ignore what's an elegant way add toString to Quads?\n    return fmt(this.subject) + \" \" + fmt(this.predicate) + \" \" + fmt(this.object) + \" .\";\n};\n/* indexNeighborhood - index triples by predicate\n * returns: {\n *     byPredicate: Object: mapping from predicate to triples containing that\n *                  predicate.\n *\n *     candidates: [[1,3], [0,2]]: mapping from triple to the triple constraints\n *                 it matches.  It is initialized to []. Mappings that remain an\n *                 empty set indicate a triple which didn't matching anything in\n *                 the shape.\n *\n *     misses: list to receive value constraint failures.\n *   }\n */\nfunction indexNeighborhood(triples) {\n    return {\n        byPredicate: triples.reduce(function (ret, t) {\n            const p = t.predicate.value;\n            if (!ret.has(p))\n                ret.set(p, []);\n            ret.get(p).push(t);\n            // If in VERBOSE mode, add a nice toString to N3.js's triple objects.\n            if (VERBOSE)\n                t.toString = N3jsTripleToString;\n            return ret;\n        }, new Map()),\n        // candidates: _seq<number>(triples.length).map(function () {\n        //   return [];\n        // }),\n        misses: []\n    };\n}\n/* Return a list of n `undefined`s.\n *\n * Note that Array(n) on its own returns a \"sparse array\" so Array(n).map(f)\n * never calls f.\n * This doesn't work without both a fill and a map (‽):\n *   extendsToTriples: Quad[][] = Array((shape.extends || []).length).fill([]]).map(() => []);\n */\nfunction _seq(n) {\n    return Array.from(Array(n)); // ha ha ha, javascript, you suck.\n}\nfunction runtimeError(...args) {\n    const errorStr = args.join(\"\");\n    const e = new Error(errorStr);\n    if (\"captureStackTrace\" in Error) {\n        Error.captureStackTrace(e, runtimeError);\n    }\n    throw e;\n}\n//# sourceMappingURL=shex-validator.js.map"],"names":["this","require$$0","require$$1","require$$2","require$$3","require$$4","require$$5","require$$6"],"mappings":"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","x_google_ignoreList":[0]}