{"version":3,"file":"shex-term.js","sources":["../../../../../../../../fhircat/fhir-sparql/fhir-sparql-js/node_modules/@shexjs/term/lib/shex-term.js"],"sourcesContent":["\"use strict\";\n/**\n * Terms used in ShEx.\n *\n * There are three representations of RDF terms used in ShEx NamedNode validation and applications:\n * 1. LD (short for JSON-LD) @ids used in ShExJ.\n *   \"http://a.example/some/Iri\n *   \"_:someBlankNode\n *   { \"value\": \"1.0\", \"datatype\": \"http://www.w3.org/2001/XMLSchema#float\" }\n *   { \"value\": \"chat\", \"language\": \"fr\" }\n * 2. RdfJs Terms [RdfJsTerm] specification used in validation\n *   { \"termType\": \"NamedNode\": \"value\": \"http://a.example/some/Iri\" }\n *   { \"termType\": \"BlankNode\": \"value\": \"someBlankNode\" }\n *   { \"termType\": \"Literal\": \"value\": \"1.0\", \"datatype\": \"http://www.w3.org/2001/XMLSchema#float\" }\n *   { \"termType\": \"Literal\": \"value\": \"chat\", \"language\": \"fr\" }\n * 3. Turtle representation is used for human interfaces\n *   <http://a.example/some/Iri>, p:IRI, p:, :\n *   _:someBlankNode, []\n *   \"1.0\"^^<http://www.w3.org/2001/XMLSchema#float>, \"1.0\"^^xsd:float, 1.0\n *   \"chat\"@fr\n *   \"1.0\"^^http://www.w3.org/2001/XMLSchema#float\n *\n * [RdfJsTerm](https://rdf.js.org/data-model-spec/#term-interface)\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.rdfJsTerm2Ld = exports.ld2RdfJsTerm = exports.shExJsTerm2Turtle = exports.rdfJsTerm2Turtle = exports.Terminals = exports.XsdString = exports.RdfLangString = void 0;\nconst RelativizeIri = require(\"relativize-url\").relativize;\n// import {relativize as RelativizeIri} from \"relativize-url\"; // someone should lecture the maintainer\nconst rdf_data_factory_1 = require(\"rdf-data-factory\");\nconst RdfJsFactory = new rdf_data_factory_1.DataFactory();\nexports.RdfLangString = \"http://www.w3.org/1999/02/22-rdf-syntax-ns#langString\";\nexports.XsdString = \"http://www.w3.org/2001/XMLSchema#string\";\nconst PN_CHARS_BASE = \"A-Za-z\\u{C0}-\\u{D6}\\u{D8}-\\u{F6}\\u{F8}-\\u{2FF}\\u{370}-\\u{37D}\\u{37F}-\\u{1FFF}\\u{200C}-\\u{200D}\\u{2070}-\\u{218F}\\u{2C00}-\\u{2FEF}\\u{3001}-\\u{D7FF}\\u{F900}-\\u{FDCF}\\u{FDF0}-\\u{FFFD}\"; // escape anything outside BMP: \\u{10000}-\\u{EFFFF}\nconst PN_CHARS_U = PN_CHARS_BASE + \"_\";\nconst PN_CHARS_WO_HYPHEN = PN_CHARS_U + \"0-9\\u{B7}\\u{300}-\\u{36F}\\u{203F}-\\u{2040}\";\nconst PN_PREFIX = [PN_CHARS_BASE, PN_CHARS_WO_HYPHEN + '.-', PN_CHARS_WO_HYPHEN + '-'];\nconst PN_LOCAL = [\n    PN_CHARS_U + \":0-9\",\n    PN_CHARS_WO_HYPHEN + \".:-\",\n    PN_CHARS_WO_HYPHEN + \":-\"\n];\nexports.Terminals = {\n    Turtle: {\n        PN_CHARS_BASE,\n        PN_CHARS_U,\n        PN_CHARS_WO_HYPHEN,\n        PN_PREFIX,\n        PN_LOCAL,\n    }\n};\nfunction rdfJsTerm2Turtle(node, meta) {\n    switch (node.termType) {\n        case (\"NamedNode\"):\n            return iri2Turtle(node.value, meta);\n        case (\"BlankNode\"):\n            return \"_:\" + node.value;\n        case (\"Literal\"):\n            return \"\\\"\" + node.value.replace(/\"/g, '\\\\\"') + \"\\\"\" + (node.datatype.value === exports.RdfLangString\n                ? \"@\" + node.language\n                : node.datatype.value === exports.XsdString\n                    ? \"\"\n                    : \"^^\" + node.datatype.value);\n        default: throw Error(`rdfJsTerm2Turtle: unknown RDFJS node type: ${JSON.stringify(node)}`);\n    }\n}\nexports.rdfJsTerm2Turtle = rdfJsTerm2Turtle;\nfunction shExJsTerm2Turtle(node, meta = { base: \"\", prefixes: {} }, aForType) {\n    if (typeof node === \"string\") {\n        if (node.startsWith(\"_:\")) {\n            return node;\n        }\n        else {\n            return iri2Turtle(node, meta, aForType);\n        }\n    }\n    else if (typeof node === \"object\" && \"value\" in node) {\n        let value = node.value;\n        const type = node.type;\n        const language = node.language;\n        // Escape special characters\n        if (escape.test(value))\n            value = value.replace(escapeAll, characterReplacer);\n        // Write the literal, possibly with type or language\n        if (language)\n            return '\"' + value + '\"@' + language;\n        else if (type && type !== \"http://www.w3.org/2001/XMLSchema#string\")\n            return '\"' + value + '\"^^' + iri2Turtle(type, meta, false);\n        else\n            return '\"' + value + '\"';\n    }\n    else {\n        throw Error(\"Unknown internal term type: \" + JSON.stringify(node));\n    }\n}\nexports.shExJsTerm2Turtle = shExJsTerm2Turtle;\n// Characters in literals that require escaping\nconst escape = /[\"\\\\\\t\\n\\r\\b\\f\\u0000-\\u0019\\ud800-\\udbff]/;\nconst escapeAll = /[\"\\\\\\t\\n\\r\\b\\f\\u0000-\\u0019]|[\\ud800-\\udbff][\\udc00-\\udfff]/g;\nconst escapeReplacements = {\n    '\\\\': '\\\\\\\\', '\"': '\\\\\"', '\\t': '\\\\t',\n    '\\n': '\\\\n', '\\r': '\\\\r', '\\b': '\\\\b', '\\f': '\\\\f',\n};\n// Replaces a character by its escaped version\nfunction characterReplacer(character) {\n    // Replace a single character by its escaped version\n    let result = escapeReplacements[character]; // @@ const should be let\n    if (result === undefined) {\n        // Replace a single character with its 4-bit unicode escape sequence\n        if (character.length === 1) {\n            result = character.charCodeAt(0).toString(16);\n            result = '\\\\u0000'.substr(0, 6 - result.length) + result;\n        }\n        // Replace a surrogate pair with its 8-bit unicode escape sequence\n        else {\n            result = ((character.charCodeAt(0) - 0xD800) * 0x400 +\n                character.charCodeAt(1) + 0x2400).toString(16);\n            result = '\\\\U00000000'.substr(0, 10 - result.length) + result;\n        }\n    }\n    return result;\n}\nfunction ld2RdfJsTerm(ld) {\n    switch (typeof ld) {\n        case 'object':\n            const copy = JSON.parse(JSON.stringify(ld));\n            if (!copy.value)\n                throw Error(`JSON-LD-style object literal has no value: ${JSON.stringify(ld)}`);\n            const value = copy.value;\n            delete copy.value;\n            if (copy.language)\n                return RdfJsFactory.literal(value, copy.language);\n            if (copy.type)\n                return RdfJsFactory.literal(value, RdfJsFactory.namedNode(copy.type));\n            if (Object.keys(copy).length > 0)\n                throw Error(`Unrecognized attributes inn JSON-LD-style object literal: ${JSON.stringify(Object.keys(copy))}`);\n            return RdfJsFactory.literal(value);\n        case 'string':\n            return ld.startsWith('_:')\n                ? RdfJsFactory.blankNode(ld.substr(2))\n                : RdfJsFactory.namedNode(ld);\n        default: throw Error(`Unrecognized JSON-LD-style term: ${JSON.stringify(ld)}`);\n    }\n}\nexports.ld2RdfJsTerm = ld2RdfJsTerm;\nfunction rdfJsTerm2Ld(term) {\n    switch (term.termType) {\n        case \"NamedNode\": return term.value;\n        case \"BlankNode\": return \"_:\" + term.value;\n        case \"Literal\":\n            const ret = { value: term.value };\n            const dt = term.datatype.value;\n            const lang = term.language;\n            if (dt &&\n                dt !== \"http://www.w3.org/2001/XMLSchema#string\" &&\n                dt !== \"http://www.w3.org/1999/02/22-rdf-syntax-ns#langString\")\n                ret.type = dt;\n            if (lang)\n                ret.language = lang;\n            return ret;\n        default:\n            throw Error(`Unrecognized termType ${term.termType} ${term.value}`);\n    }\n}\nexports.rdfJsTerm2Ld = rdfJsTerm2Ld;\nfunction iri2Turtle(iri, meta = { base: \"\", prefixes: {} }, aForType = true) {\n    const { base, prefixes = {} } = meta;\n    if (aForType && iri === \"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\")\n        return \"a\";\n    const rel = \"<\" + (base.length > 0 ? RelativizeIri(iri, base) : iri) + \">\";\n    for (const prefix in prefixes) {\n        const ns = prefixes[prefix];\n        if (iri.startsWith(ns)) {\n            const localName = iri.substr(ns.length);\n            const first = localName.slice(0, 1).replaceAll(new RegExp(\"[^\" + exports.Terminals.Turtle.PN_LOCAL[0] + \"]\", \"g\"), s => '\\\\' + s);\n            const middle = localName.slice(1, localName.length - 1).replaceAll(new RegExp(\"[^\" + exports.Terminals.Turtle.PN_LOCAL[1] + \"]\", \"g\"), s => '\\\\' + s);\n            const last = localName.length > 1 ? localName.slice(localName.length - 1).replaceAll(new RegExp(\"[^\" + exports.Terminals.Turtle.PN_LOCAL[2] + \"]\", \"g\"), s => '\\\\' + s) : '';\n            const pName = prefix + ':' + first + middle + last;\n            if (pName.length < rel.length)\n                return pName;\n        }\n    }\n    return rel;\n}\n//# sourceMappingURL=shex-term.js.map\n"],"names":["require$$0","require$$1"],"mappings":"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","x_google_ignoreList":[0]}