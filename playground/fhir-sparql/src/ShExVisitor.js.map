{"version":3,"file":"ShExVisitor.js","sources":["../../../../../fhircat/fhir-sparql/fhir-sparql-js/src/ShExVisitor.ts"],"sourcesContent":["/* istanbul ignore file */\nimport * as ShExJ from 'shexj';\n\nexport class ShExVisitor {\n  ctor_args: any[];\n  constructor (...ctor_args: any[]) {\n    this.ctor_args = ctor_args;\n\n    // A lot of ShExVisitor's functions are the same. This creates them.\n    /*\n    const reusedMethods: Record<string, string[]> = {\n      '_visitValue': [\n        \"visit@context\", \"visitBase\", \"visitInclude\", \"visitStart\",\n        \"visitAbstract\", \"visitClosed\",\n        \"visitInverse\", \"visitPredicate\", \"visitName\", \"visitId\", \"visitCode\", \"visitMin\", \"visitMax\",\n        \"visitType\", \"visitNodeKind\", \"visitDatatype\", \"visitPattern\", \"visitFlags\",\n        \"visitLength\", \"visitMinlength\", \"visitMaxlength\",\n        \"visitMininclusive\", \"visitMinexclusive\", \"visitMaxinclusive\", \"visitMaxexclusive\",\n        \"visitTotaldigits\", \"visitFractiondigits\",\n      ],\n      '_visitList': [ \"visitExtra\", \"visitAnnotations\", ],\n    };\n    for (const reuseMe in reusedMethods) {\n      const toFill = reusedMethods[reuseMe];\n      for (const needed of toFill)\n        if (!(needed in this)) {\n          (this as Record<string, any>)[needed] = (this as Record<string, any>)[reuseMe];\n        }\n    }\n    */\n  }\n\n  static isTerm (t: ShExJ.valueSetValue): t is ShExJ.objectValue {\n    return typeof t !== \"object\" || \"value\" in t && Object.keys(t).reduce((r, k) => {\n      return r === false ? r : [\"value\", \"type\", \"language\"].indexOf(k) !== -1;\n    }, true);\n  }\n\n  static isShapeRef (expr: ShExJ.shapeExprOrRef): expr is ShExJ.shapeDeclRef {\n    return typeof expr === \"string\" // test for JSON-LD @ID\n  }\n/*\n  static visitMap (map, val) {\n    const ret = {};\n    Object.keys(map).forEach(function (item) {\n      ret[item] = val(map[item]);\n    });\n    return ret;\n  }\n*/\n  runtimeError (e: Error): void {\n    throw e;\n  }\n\n  visitSchema (schema: ShExJ.Schema, ...args: any[]): any {\n    const ret = { type: \"Schema\" };\n    this._expect(schema, \"type\", \"Schema\");\n    this._maybeSet(schema, ret, \"Schema\",\n                   [\"@context\", \"prefixes\", \"base\", \"imports\", \"startActs\", \"start\", \"shapes\"],\n                   [\"_base\", \"_prefixes\", \"_index\", \"_sourceMap\", \"_locations\"],\n                   ...args\n                  );\n    return ret;\n  }\n/*\n  visitPrefixes (prefixes, ...args: any[]) {\n    return prefixes === undefined ?\n      undefined :\n      ShExVisitor.visitMap(prefixes, function (val) {\n        return val;\n      });\n  }\n*/\n  visitIRI (i: ShExJ.IRIREF, ...args: any[]): any {\n    return i;\n  }\n\n  visitImports (imports: ShExJ.IRIREF[], ...args: any[]): any {\n    return imports.map((imp) => {\n      return this.visitIRI(imp, args);\n    });\n  }\n\n  visitStartActs (startActs: ShExJ.SemAct[], ...args: any[]): any {\n    return startActs === undefined ?\n      undefined :\n      startActs.map((act) => {\n        return this.visitSemAct(act, ...args);\n      });\n  }\n\n  visitSemActs (semActs: ShExJ.SemAct[], ...args: any[]): any {\n    if (semActs === undefined)\n      return undefined;\n    const ret: ShExJ.SemAct[] = []\n    semActs.forEach(semAct => {\n      ret.push(this.visitSemAct(semAct, ...args) as ShExJ.SemAct);\n    });\n    return ret;\n  }\n\n  visitSemAct (semAct: ShExJ.SemAct, ...args: any[]): any {\n    const ret = { type: \"SemAct\" };\n    this._expect(semAct, \"type\", \"SemAct\");\n\n    this._maybeSet(semAct, ret, \"SemAct\",\n                   [\"name\", \"code\"], null, ...args);\n    return ret;\n  }\n\n  visitShapes (shapes: ShExJ.ShapeDecl[], ...args: any[]): any {\n    if (shapes === undefined)\n      return undefined;\n    return shapes.map(\n      shapeExpr =>\n      this.visitShapeDecl(shapeExpr, ...args)\n    );\n  }\n\n  visitShapeDecl (decl: ShExJ.ShapeDecl, ...args: any[]): any {\n    return this._maybeSet(decl, { type: \"ShapeDecl\" }, \"ShapeDecl\",\n                          [\"id\", \"abstract\", \"restricts\", \"shapeExpr\"], null, ...args);\n  }\n\n  visitShapeExpr (expr: ShExJ.shapeExprOrRef, ...args: any[]): any {\n    if (ShExVisitor.isShapeRef(expr))\n      return this.visitShapeRef(expr, ...args)\n    switch (expr.type) {\n    case \"Shape\": return this.visitShape(expr, ...args);\n    case \"NodeConstraint\": return this.visitNodeConstraint(expr, ...args);\n    case \"ShapeAnd\": return this.visitShapeAnd(expr, ...args);\n    case \"ShapeOr\": return this.visitShapeOr(expr, ...args);\n    case \"ShapeNot\": return this.visitShapeNot(expr, ...args);\n    case \"ShapeExternal\": return this.visitShapeExternal(expr, ...args);\n    default:\n      throw Error(\"unexpected shapeExpr type: \" + (expr as any).type);\n    }\n  }\n\n  // visitValueExpr (expr: ShExJ.shapeExprOrRef, ...args: any[]):any {\n  //   return this.visitShapeExpr(expr, ...args); // call potentially overloaded visitShapeExpr\n  // }\n\n  // _visitShapeGroup: visit a grouping expression (shapeAnd, shapeOr)\n  _visitShapeGroup (expr: ShExJ.ShapeAnd | ShExJ.ShapeOr, ...args: any[]): any {\n    this._testUnknownAttributes(expr, [\"shapeExprs\"], expr.type, this.visitShapeNot)\n    const r = { type: expr.type } as ShExJ.ShapeAnd | ShExJ.ShapeOr;\n    r.shapeExprs = expr.shapeExprs.map((nested) => {\n      return this.visitShapeExpr(nested, ...args);\n    });\n    return r;\n  }\n\n  visitShapeAnd (expr: ShExJ.ShapeAnd, ...args: any[]): any { return this._visitShapeGroup(expr, ...args); }\n  visitShapeOr (expr: ShExJ.ShapeOr, ...args: any[]): any { return this._visitShapeGroup(expr, ...args); }\n\n  // _visitShapeNot: visit negated shape\n  visitShapeNot (expr: ShExJ.ShapeNot, ...args: any[]): any {\n    this._testUnknownAttributes(expr, [\"shapeExpr\"], \"ShapeNot\", this.visitShapeNot)\n    const r = { type: expr.type } as ShExJ.ShapeNot;\n    r.shapeExpr = this.visitShapeExpr(expr.shapeExpr, ...args);\n    return r;\n  }\n\n  // ### `visitNodeConstraint` deep-copies the structure of a shape\n  visitShape (shape: ShExJ.Shape, ...args: any[]): any {\n    const ret = { type: \"Shape\" };\n    this._expect(shape, \"type\", \"Shape\");\n\n    this._maybeSet(shape, ret, \"Shape\",\n                   [ \"abstract\", \"extends\",\n                     \"closed\",\n                     \"expression\", \"extra\", \"semActs\", \"annotations\"], null, ...args);\n    return ret;\n  }\n\n  _visitShapeExprList (ext: /* ShExJ.Restricts | */ShExJ.shapeExpr[], ...args: any[]) {\n    return ext.map((t) => {\n      return this.visitShapeExpr(t, ...args);\n    });\n  }\n\n  // visitRestricts (restricts: ShExJ.Restricts, ...args: any[]): any { return this._visitShapeExprList(restricts, ...args); }\n  visitExtends (ext: ShExJ.shapeExpr[], ...args: any[]): any { return this._visitShapeExprList(ext, ...args); }\n\n  // ### `visitNodeConstraint` deep-copies the structure of a shape\n  visitNodeConstraint (nodeConstraint: ShExJ.NodeConstraint, ...args: any[]): any {\n    const ret = { type: \"NodeConstraint\" };\n    this._expect(nodeConstraint, \"type\", \"NodeConstraint\");\n\n    this._maybeSet(nodeConstraint, ret, \"NodeConstraint\",\n                   [ \"nodeKind\", \"datatype\", \"pattern\", \"flags\", \"length\",\n                     \"reference\", \"minlength\", \"maxlength\",\n                     \"mininclusive\", \"minexclusive\", \"maxinclusive\", \"maxexclusive\",\n                     \"totaldigits\", \"fractiondigits\", \"values\", \"annotations\", \"semActs\"], null, ...args);\n    return ret;\n  }\n\n  visitShapeRef (reference: ShExJ.shapeDeclRef, ...args: any[]): any {\n    if (typeof reference !== \"string\")\n      throw Error(\"visitShapeRef expected a string, not \" + JSON.stringify(reference));\n    return reference;\n  }\n\n  visitShapeExternal (expr: ShExJ.ShapeExternal, ...args: any[]): any {\n    this._testUnknownAttributes(expr, [], \"ShapeExternal\", this.visitShapeNot)\n    return { type: \"ShapeExternal\" };\n  }\n\n  // _visitGroup: visit a grouping expression (someOf or eachOf)\n  _visitGroup (expr: ShExJ.OneOf | ShExJ.EachOf, ...args: any[]): any {\n    const r = Object.assign(\n      // pre-declare an id so it sorts to the top\n      \"id\" in expr ? { id: null } : { },\n      { type: expr.type }\n    ) as ShExJ.OneOf | ShExJ.EachOf;\n    r.expressions = expr.expressions.map((nested) => {\n      return this.visitExpression(nested, ...args);\n    });\n    return this._maybeSet(expr, r, \"expr\",\n                          [\"id\", \"min\", \"max\", \"annotations\", \"semActs\"], [\"expressions\"], ...args);\n  }\n\n  visitOneOf (expr: ShExJ.OneOf, ...args: any[]): any { return this._visitGroup(expr, ...args); }\n  visitEachOf (expr: ShExJ.EachOf, ...args: any[]): any { return this._visitGroup(expr, ...args); }\n\n  visitTripleConstraint (expr: ShExJ.TripleConstraint, ...args: any[]): any {\n    return this._maybeSet(expr,\n                          Object.assign(\n                            // pre-declare an id so it sorts to the top\n                            \"id\" in expr ? { id: null } : { },\n                            { type: \"TripleConstraint\" }\n                          ),\n                          \"TripleConstraint\",\n                          [\"id\", \"inverse\", \"predicate\", \"valueExpr\",\n                           \"min\", \"max\", \"annotations\", \"semActs\"], null, ...args)\n  }\n\n  visitTripleExpr (expr: ShExJ.tripleExprOrRef, ...args: any[]): any {\n    if (typeof expr === \"string\")\n      return this.visitInclusion(expr);\n    switch (expr.type) {\n    case \"TripleConstraint\": return this.visitTripleConstraint(expr, ...args);\n    case \"OneOf\": return this.visitOneOf(expr, ...args);\n    case \"EachOf\": return this.visitEachOf(expr, ...args);\n    default:\n      throw Error(\"unexpected expression type: \" + (expr as any).type);\n    }\n  }\n\n  visitExpression (expr: ShExJ.tripleExprOrRef, ...args: any[]): any {\n    return this.visitTripleExpr(expr, ...args); // call potentially overloaded visitTripleExpr\n  }\n\n  visitValues (values: ShExJ.valueSetValue[], ...args: any[]): any {\n    return values.map((t) => {\n      return ShExVisitor.isTerm(t) || t.type === \"Language\" ?\n        t :\n        this.visitStemRange(t, ...args);\n    });\n  }\n\n  visitStemRange (t: ShExJ.IriStem | ShExJ.IriStemRange | ShExJ.LiteralStem | ShExJ.LiteralStemRange | ShExJ.LanguageStem | ShExJ.LanguageStemRange, ...args: any[]): any {\n    // this._expect(t, \"type\", \"IriStemRange\");\n    if (!(\"type\" in t))\n      this.runtimeError(Error(\"expected \"+JSON.stringify(t)+\" to have a 'type' attribute.\"));\n    const stemRangeTypes = [\"IriStem\", \"LiteralStem\", \"LanguageStem\", \"IriStemRange\", \"LiteralStemRange\", \"LanguageStemRange\"];\n    if (stemRangeTypes.indexOf(t.type) === -1)\n      this.runtimeError(Error(\"expected type attribute '\"+t.type+\"' to be in '\"+stemRangeTypes+\"'.\"));\n    let stem;\n    if (ShExVisitor.isTerm(t)) {\n      this._expect(t.stem, \"type\", \"Wildcard\");\n      stem = { type: t.type, stem: { type: \"Wildcard\" } };\n    } else {\n      stem = { type: t.type, stem: t.stem };\n    }\n    if ((t as ShExJ.IriStemRange | ShExJ.LiteralStemRange | ShExJ.LanguageStemRange).exclusions) {\n      (stem as any).exclusions = (t as ShExJ.IriStemRange | ShExJ.LiteralStemRange | ShExJ.LanguageStemRange).exclusions.map((c) => {\n        return this.visitExclusion(c, ...args);\n      });\n    }\n    return stem;\n  }\n\n  visitExclusion (c: ShExJ.iriRangeExclusion | ShExJ.literalRangeExclusion | ShExJ.languageRangeExclusion, ...args: any[]): any {\n    if (!ShExVisitor.isTerm(c)) {\n      // this._expect(c, \"type\", \"IriStem\");\n      if (!(\"type\" in c))\n        this.runtimeError(Error(\"expected \"+JSON.stringify(c)+\" to have a 'type' attribute.\"));\n      const stemTypes = [\"IriStem\", \"LiteralStem\", \"LanguageStem\"];\n      if (stemTypes.indexOf(c.type) === -1)\n        this.runtimeError(Error(\"expected type attribute '\"+c.type+\"' to be in '\"+stemTypes+\"'.\"));\n      return { type: c.type, stem: c.stem };\n    } else {\n      return c;\n    }\n  }\n\n  visitInclusion (inclusion: ShExJ.tripleExprRef, ...args: any[]): any {\n    if (typeof inclusion !== \"string\")\n      throw Error(\"visitInclusion expected a string, not \" + JSON.stringify(inclusion));\n    return inclusion;\n  }\n\n  /** internal generic handler for visiting ShExJ structure members\n   * treats members as keys on object\n   */\n  _maybeSet (obj: object, ret: object, context: string, members: string[], ignore: string[] | null, ...args: any[]) {\n    this._testUnknownAttributes(obj, ignore ? members.concat(ignore) : members, context, this._maybeSet)\n    members.forEach((member) => {\n      const methodName = \"visit\" + member.charAt(0).toUpperCase() + member.slice(1);\n      if (member in obj) {\n        const f = (this as any)[methodName];\n        if (typeof f !== \"function\") {\n          throw Error(methodName + \" not found in Visitor\");\n        }\n        const t = f.call(this, (obj as any)[member], ...args);\n        if (t !== undefined) {\n          (ret as any)[member] = t;\n        }\n      }\n    });\n    return ret;\n  }\n\n  _visitValue (v: string, ...args: any[]): any {\n    return v;\n  }\n\n  // \"visit@context\",\n  visitBase (x: string, ...args: any[]): any { return this._visitValue(x, ...args); }\n  visitInclude (x: string, ...args: any[]): any { return this._visitValue(x, ...args); }\n  visitStart (x: string, ...args: any[]): any { return this._visitValue(x, ...args); }\n  visitAbstract (x: string, ...args: any[]): any { return this._visitValue(x, ...args); }\n  visitClosed (x: string, ...args: any[]): any { return this._visitValue(x, ...args); }\n  visitInverse (x: string, ...args: any[]): any { return this._visitValue(x, ...args); }\n  visitPredicate (x: string, ...args: any[]): any { return this._visitValue(x, ...args); }\n  visitName (x: string, ...args: any[]): any { return this._visitValue(x, ...args); }\n  visitId (x: string, ...args: any[]): any { return this._visitValue(x, ...args); }\n  visitCode (x: string, ...args: any[]): any { return this._visitValue(x, ...args); }\n  visitMin (x: string, ...args: any[]): any { return this._visitValue(x, ...args); }\n  visitMax (x: string, ...args: any[]): any { return this._visitValue(x, ...args); }\n  visitType (x: string, ...args: any[]): any { return this._visitValue(x, ...args); }\n  visitNodeKind (x: string, ...args: any[]): any { return this._visitValue(x, ...args); }\n  visitDatatype (x: string, ...args: any[]): any { return this._visitValue(x, ...args); }\n  visitPattern (x: string, ...args: any[]): any { return this._visitValue(x, ...args); }\n  visitFlags (x: string, ...args: any[]): any { return this._visitValue(x, ...args); }\n  visitLength (x: string, ...args: any[]): any { return this._visitValue(x, ...args); }\n  visitMinlength (x: string, ...args: any[]): any { return this._visitValue(x, ...args); }\n  visitMaxlength (x: string, ...args: any[]): any { return this._visitValue(x, ...args); }\n  visitMininclusive (x: string, ...args: any[]): any { return this._visitValue(x, ...args); }\n  visitMinexclusive (x: string, ...args: any[]): any { return this._visitValue(x, ...args); }\n  visitMaxinclusive (x: string, ...args: any[]): any { return this._visitValue(x, ...args); }\n  visitMaxexclusive (x: string, ...args: any[]): any { return this._visitValue(x, ...args); }\n  visitTotaldigits (x: string, ...args: any[]): any { return this._visitValue(x, ...args); }\n  visitFractiondigits (x: string, ...args: any[]): any { return this._visitValue(x, ...args); }\n\n  _visitList (l: ShExJ.IRIREF[] | ShExJ.Annotation[], ...args: any[]) {\n    return l.slice();\n  }\n\n  visitExtra (extra: ShExJ.IRIREF[]) { return this._visitList(extra); }\n  visitAnnotations (annotations: ShExJ.Annotation[]) { return this._visitList(annotations); }\n\n  _testUnknownAttributes (obj: object, expected: string[], context: string, captureFrame: Function) {\n    const unknownMembers = Object.keys(obj).reduce(function (ret, k) {\n      return k !== \"type\" && expected.indexOf(k) === -1\n        //@ts-ignore\n        ? ret.concat(k)\n        : ret;\n    }, []);\n    if (unknownMembers.length > 0) {\n      const e = Error(\"unknown propert\" + (unknownMembers.length > 1 ? \"ies\" : \"y\") + \": \" +\n                      unknownMembers.map(function (p) {\n                        return \"\\\"\" + p + \"\\\"\";\n                      }).join(\",\") +\n                      \" in \" + context + \": \" + JSON.stringify(obj));\n      Error.captureStackTrace(e, captureFrame);\n      throw e;\n    }\n  }\n\n  _expect (o: any, p: string, v: any) {\n    if (!(p in o))\n      this.runtimeError(Error(\"expected \"+JSON.stringify(o)+\" to have a .\"+p));\n    if (arguments.length > 2 && o[p] !== v)\n      this.runtimeError(Error(\"expected \"+o[p]+\" to equal \"+v));\n  }\n}\n\n// The ShEx Vistor is here to minimize deps for ShExValidator.\n/** create indexes for schema\n */\nexport function index (schema: ShExJ.Schema) {\n  let index = {\n    shapeExprs: {},\n    tripleExprs: {}\n  };\n  let v = new ShExVisitor();\n\n  let oldVisitExpression = v.visitTripleExpr;\n  v.visitTripleExpr = function (expression, ...args: any[]) {\n    if (typeof expression === \"object\" && \"id\" in expression)\n      //@ts-ignore\n      index.tripleExprs[expression.id] = expression;\n    return oldVisitExpression.call(v, expression, ...args);\n  };\n\n  let oldVisitShapeDecl = v.visitShapeDecl;\n  v.visitShapeDecl = function (shapeExpr, ...args: any[]) {\n    if (typeof shapeExpr === \"object\" && \"id\" in shapeExpr)\n      //@ts-ignore\n      index.shapeExprs[shapeExpr.id] = shapeExpr;\n    return oldVisitShapeDecl.call(v, shapeExpr, ...args);\n  };\n\n  v.visitSchema(schema);\n  return index;\n}\n"],"names":[],"mappings":"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"}