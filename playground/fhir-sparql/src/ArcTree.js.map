{"version":3,"file":"ArcTree.js","sources":["../../../../../fhircat/fhir-sparql/fhir-sparql-js/src/ArcTree.ts"],"sourcesContent":["import {RdfUtils, Bgp, Triple, Term, POS, TTerm} from './RdfUtils';\nimport {Rdf} from './Namespaces';\nimport * as SparqlJs from \"sparqljs\";\n\nexport class PosArcTree {\n  constructor(\n      public pos: POS,\n      public arcTree: ArcTree,\n\n  ) {}\n}\nexport class ArcTree {\n  constructor (\n      public tp: Triple,\n      public out: ArcTree[]) {\n    if (!out) throw Error(`${this.tp} has no out rule array`);\n  }\n\n  /** Construct an ArcTree for an arc and all arcs it reaches\n   * Index variables in the same pass for efficiency.\n   */\n  static constructArcTree (triplePatterns: Triple[], forArc: Triple | null, node: TTerm, treeVars: Map<string, PosArcTree[]>, referents: Set<string>): ArcTree {\n    // ArcTree's don't cross references (or canonical or ...?).\n    if (forArc && (forArc.predicate as SparqlJs.IriTerm).value === 'http://hl7.org/fhir/reference') {\n      const object = forArc.object;\n      if (object.termType === 'Variable' && !referents.has(object.value))\n        referents.add(object.value); // mark as referent\n      return new ArcTree(forArc, []);\n    }\n\n    // Canonical order to match order in FhirQuery rule bodies\n    // @ts-ignore\n    const arcsOut = ArcTree.sortArcs(RdfUtils.stealMatching(triplePatterns, node, null, null));\n\n    const out = arcsOut.map(triplePattern => {\n      const arcTree = ArcTree.constructArcTree(triplePatterns, triplePattern as Triple, triplePattern.object as TTerm, treeVars, referents);\n\n      // Index the variables that connect the trees.\n      (['subject', 'object']).forEach(pos => {\n        const v = triplePattern[pos as POS] as SparqlJs.Term;\n        // Ignore connections formed by IRIs, BNodes or Literals.\n        if (v.termType === 'Variable') {\n          if (!treeVars.has(v.value)) {\n            treeVars.set(v.value, []);\n          };\n          treeVars.get(v.value)!.push(new PosArcTree(pos as POS, arcTree));\n        }\n      });\n\n      return arcTree;\n    });\n\n    return new ArcTree(forArc!, out);\n  }\n\n  getBgp () {\n    const ret: SparqlJs.Triple[] = [];\n    if (this.tp !== null)\n      ret.push(this.tp);\n    this.out.forEach(tree =>\n      Array.prototype.push.apply(ret, tree.getBgp().triples)\n    );\n    return new Bgp(ret);\n  }\n\n  // not used\n  toSparqlTriplePatterns (): Triple[] {\n    return (this.tp ? [this.tp] : []).concat((this.out).flatMap(child => child.toSparqlTriplePatterns()));\n  }\n\n  toString (indent = ''): string {\n    const tpStr = this.tp === null ? '<root>' : this.tp.toString();\n    return this.out.length === 0\n      ? indent + tpStr\n      : indent + tpStr + ' [\\n' + this.out.map(out => out.toString(indent + '  ')).join('\\n') + '\\n' + indent + ']';\n  }\n\n  /** sort a list of triple (patterns), AKA arcs\n   * Bubble rdf:type to the top\n   * Sort remaining by predicate name.\n   *   Since all have same subject and there are no repeated properties in\n   *   FHIR/RDF, we can assume that that localeCompare will never return 0\n   */\n  static sortArcs (triplePatterns: SparqlJs.Triple[]): SparqlJs.Triple[] {\n    const ret: SparqlJs.Triple[] = [];\n    // @ts-ignore\n    Array.prototype.push.apply(ret, RdfUtils.stealMatching(triplePatterns, null, Term.blessSparqlJs(Rdf.type), null)); // TODO: accept blessed\n    Array.prototype.push.apply(ret, triplePatterns.sort(\n      (l, r) => RdfUtils.pStr(l.predicate).localeCompare(RdfUtils.pStr(r.predicate))\n    ));\n    return ret;\n  }\n}\n"],"names":[],"mappings":"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"}